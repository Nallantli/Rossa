static isPrime: Function {
	data := {};

	fn `()`(ref n: Number) {
		if n < 2 then {
			return false;
		} elif data[n -> String] != nil then {
			return data[n -> String];
		}

		for i in 2 <> n / 2 do {
			if n % i == 0 then {
				return data[n -> String] = false;
			}
		}

		return data[n -> String] = true;
	}
}

fn pfact(ref n: Number) {
	if n < 2 then {
		return [];
	}
	for i in [2, 3 .. n : 2].filter(isPrime) do {
		if n % i == 0 then {
			return [ i ] ++ pfact(n / i);
		}
	}
	return [ n ];
}

putln([0 <> 100]
	.map(fn(v) ([v, pfact(v)]))
	.sort(fn(a, b) a[1].len() > b[1].len())
	.map(fn(e) e[0]));