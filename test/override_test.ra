struct Test {
	fn init() {
		putln("CONSTRUCTOR CALLED");
	}

	fn `+`(ref a) {
		putln("ADD: " ++ (a -> String));
	}

	fn `-`(ref a) {
		putln("SUB: " ++ (a -> String));
	}

	fn `*`(ref a) {
		putln("MUL: " ++ (a -> String));
	}

	fn `/`(ref a) {
		putln("DIV: " ++ (a -> String));
	}

	fn `%`(ref a) {
		putln("MOD: " ++ (a -> String));
	}

	fn `**`(ref a) {
		putln("POW: " ++ (a -> String));
	}

	fn `<`(ref a) {
		putln("LESS: " ++ (a -> String));
		return false;
	}

	fn `>`(ref a) {
		putln("MORE: " ++ (a -> String));
		return false;
	}

	fn `<=`(ref a) {
		putln("ELESS: " ++ (a -> String));
		return false;
	}

	fn `>=`(ref a) {
		putln("EMORE: " ++ (a -> String));
		return false;
	}

	fn `==`(ref a) {
		putln("EQUALS: " ++ (a -> String));
		return false;
	}

	fn `!=`(ref a) {
		putln("NEQUALS: " ++ (a -> String));
		return false;
	}

	fn `[]`(ref a) {
		putln("INDEX: " ++ (a -> String));
	}

	fn `()`(ref a, ref b) {
		putln("CALL: " ++ (a -> String) ++ ", " ++ (b -> String));
	}

	fn `=`(ref a) {
		putln("SET: " ++ (a -> String));
	}

	fn `&`(ref a) {
		putln("B_AND: " ++ (a -> String));
	}

	fn `|`(ref a) {
		putln("B_OR: " ++ (a -> String));
	}

	fn `^`(ref a) {
		putln("B_XOR: " ++ (a -> String));
	}

	fn `<<`(ref a) {
		putln("B_SH_L: " ++ (a -> String));
	}

	fn `>>`(ref a) {
		putln("B_SH_R: " ++ (a -> String));
	}

	fn `->String`() {
		putln("TO_STRING");
		return "test";
	}

	fn `->Number`() {
		putln("TO_NUMBER");
		return 0;
	}

	fn `->Boolean`() {
		putln("TO_BOOLEAN");
		return false;
	}

	fn `->Array`() {
		putln("TO_VECTOR");
		return [];
	}

	fn `->Dictionary`() {
		putln("TO_DICTIONARY");
		return {};
	}

	fn len() {
		return 1;
	}

	fn rem() {
		putln("DELETER CALLED");
	}
}