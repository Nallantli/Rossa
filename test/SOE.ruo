SOE(ref MAX : Number) => {
	start := clock.milliseconds();
	a := alloc(MAX);
	putln("Alloc Time: " + ((clock.milliseconds() - start) -> String) + "ms");

	start = clock.milliseconds();
	for e in a do {
		e = true;
	}
	putln("Predef Time: " + ((clock.milliseconds() - start) -> String) + "ms");

	start = clock.milliseconds();
    c := MAX - 2;
	for i in [2 .. (MAX ** 0.5)] do {
		if a[i] then {
			n := i ** 2;
			while n < MAX do {
			    if a[n] then {
			        c -= 1;
					a[n] = false;
			    }
				n += i;
			}
		}
	}
	putln("Algo Time: " + ((clock.milliseconds() - start) -> String) + "ms");

	start = clock.milliseconds();
	b := alloc(c);
	j := 0;
	for i in [2 .. MAX] do {
		if a[i] then {
			b[j] = i;
			j += 1;
		}
	}
	putln("Final Time: " + ((clock.milliseconds() - start) -> String) + "ms");

	return b;
}

test(ref MAX : Number) => {
	start := clock.milliseconds();
	result := SOE(MAX);
	time := clock.milliseconds() - start;

	putln((result.length() -> String) + " Primes found for numbers below " + (MAX -> String));
	putln("Total Time: " + (time -> String) + "ms");
}

if _args.size() == 1 then {
	test(_args[0] -> Number);
} else {
	putln("Usage requires numerical argument");
}