fn SOE(ref MAX: Number) {
	start := clock.milliseconds();
	a := alloc(MAX, true);
	putln("Alloc Time: ", clock.milliseconds() - start, "ms");

	start = clock.milliseconds();
    c := MAX - 2;
	for i in 2 .. (MAX ** 0.5) do {
		if a[i] then {
			n := i ** 2;
			while n < MAX do {
			    if a[n] then {
			        c -= 1;
					a[n] = false;
			    }
				n += i;
			}
		}
	}
	putln("Algo Time: ", clock.milliseconds() - start, "ms");

	start = clock.milliseconds();
	b := alloc(c);
	j := 0;
	for i in 2 .. MAX : 2 do {
		if a[i] then {
			b[j] = i;
			j += 1;
		}
	}
	putln("Final Time: ", clock.milliseconds() - start, "ms");

	return b;
}

fn test(ref MAX: Number) {
	start := clock.milliseconds();
	result := SOE(MAX);
	time := clock.milliseconds() - start;

	putln(result.len(), " primes found for numbers below ", MAX);
	putln("Total Time: ", time, "ms");
}

if __args__.len() == 1 then {
	test(__args__[0] -> Number);
} else {
	putln("Usage requires numerical argument");
}