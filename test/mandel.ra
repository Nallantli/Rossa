load "bitmap";

static mandel class {
	ASCII := [
		" ",
		" ",
		".",
		".",
		"-",
		"-",
		"~",
		"~",
		":",
		":",
		"=",
		"=",
		"+",
		"+",
		"*",
		"*",
		"#",
		"#",
		"@",
		"@",
		" "
	];

	mandelConverger(ref real : Number, ref imag : Number, ref precision : Number) => {
		zReal := real;
		zImag := imag;
		var r2, i2;
		for i in [0 .. precision] do {
			r2 = zReal * zReal;
			i2 = zImag * zImag;

			if r2 + i2 > 4 then {
				return i;
			}

			zImag = 2.0 * zReal * zImag + imag;
			zReal = r2 - i2 + real;
		}
		return precision - 1;
	}

	draw(ref start_x : Number, ref start_y : Number, ref end_x : Number, ref end_y : Number, ref width : Number, ref height : Number) => {
		dx := (end_x - start_x) / (width - 1);
		dy := (end_y - start_y) / (height - 1);
		s := "";
		for i in [0 .. height] do {
			for j in [0 .. width] do {
				s += ASCII[mandelConverger(start_x + j * dx, end_y - i * dy, ASCII.size())];
			}
			s += "\n";
		}
		cons.setCursor(0, 0);
		puts(s);
		putln("`Z` to Exit");
	}

	print(ref start_x : Number, ref start_y : Number, ref end_x : Number, ref end_y : Number, ref width : Number, ref height : Number) => {
		image := bitmap.allocate(height, width);

		dx := (end_x - start_x) / (width - 1);
		dy := (end_y - start_y) / (height - 1);
		for i in [0 .. height] do {
			for j in [0 .. width] do {
				value := mandelConverger(start_x + j * dx, end_y - i * dy, 100) / 100;
				image[height - i - 1][j] = [math.floor((value ** 0.5) * 255), math.floor(value * 255), math.floor((value ** 2) * 255)];
			}
		}
		bitmap.write(image, height, width, "mandel_(" + (start_x -> String) + "_" + (end_x -> String) + "," + (start_y -> String) + "_" + (end_y -> String) + ").bmp");
	}
}

x := -0.5;
y := 0;
scale := 1;
width := 120;
height := 40;

system("cls");

while true do {
	mandel.draw(x - scale, y - scale, x + scale, y + scale, width, height);
	switch input.char() of {
		case 'w' do y += 2 / height * scale;
		case 's' do y -= 2 / height * scale;
		case 'a' do x -= 6 / width * scale;
		case 'd' do x += 6 / width * scale;
		case 'q' do scale = math.min(scale * 2, 4);
		case 'e' do	scale /= 2;
		case 'z' do { break; }
		case 'p' do {
			putln("Printing...");
			mandel.print(x - scale, y - scale, x + scale, y + scale, width * 2, math.floor(height * 5));
			system("cls");
		}
	}
}

system("cls");