load "graphics";

SDL.INIT();

const WIDTH = 800;
const HEIGHT = 600;

const WORLD = [
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;
	1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1;
	1, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 1;
	1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1;
	1, 0, 2, 2, 0, 5, 0, 0, 4, 0, 2, 2, 0, 1;
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;
	1, 0, 2, 2, 0, 6, 0, 0, 3, 0, 2, 2, 0, 1;
	1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1;
	1, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 1;
	1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1;
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
];

const COLORS = [
	nil,
	{
		"red" : 0xff,
		"green" : 0,
		"blue" : 0,
		"alpha" : 0xff
	},
	{
		"red" : 0,
		"green" : 0xff,
		"blue" : 0,
		"alpha" : 0xff
	},
	{
		"red" : 0,
		"green" : 0,
		"blue" : 0xff,
		"alpha" : 0xff
	},
	{
		"red" : 0xff,
		"green" : 0xff,
		"blue" : 0,
		"alpha" : 0xff
	},
	{
		"red" : 0xff,
		"green" : 0,
		"blue" : 0xff,
		"alpha" : 0xff
	},
	{
		"red" : 0,
		"green" : 0xff,
		"blue" : 0xff,
		"alpha" : 0xff
	}
];

keys := {};

posX := 1.5;
posY := 1.5;
dirX := -1;
dirY := 0;

planeX := 0;
planeY := WIDTH / HEIGHT / 2;

w := new SDL.Window("Raycaster", WIDTH, HEIGHT);
r := w.getRenderer();

cache := alloc(WIDTH);
for x in 0 .. WIDTH do {
	cache[x] = new SDL.Rect(1, HEIGHT, Color.WHITE);
}

font := new SDL.Font("test/res/unifont.ttf", 16);
fpsText := new SDL.Text(font, "", Color.WHITE);

refresh() => {
	for x in 0 .. WIDTH do {
		var sideDistX, sideDistY, stepX, stepY, side, wDist;

		camera_x := 2 * x / WIDTH - 1;
		rayDirX := dirX + planeX * camera_x;
		rayDirY := dirY + planeY * camera_x;
		mapX := math.floor(posX);
		mapY := math.floor(posY);
		deltaX := math.abs(1 / rayDirX);
		deltaY := math.abs(1 / rayDirY);
		hit := false;
		btype := 1;

		if rayDirX < 0 then {
			stepX = -1;
			sideDistX = (posX - mapX) * deltaX;
		} else {
			stepX = 1;
			sideDistX = (mapX + 1 - posX) * deltaX;
		}

		if rayDirY < 0 then {
			stepY = -1;
			sideDistY = (posY - mapY) * deltaY;
		} else {
			stepY = 1;
			sideDistY = (mapY + 1 - posY) * deltaY;
		}

		while !hit do {
			if sideDistX < sideDistY then {
				sideDistX += deltaX;
				mapX += stepX;
				side = true;
			} else {
				sideDistY += deltaY;
				mapY += stepY;
				side = false;
			}
			if WORLD[mapX][mapY] > 0 then {
				hit = true;
			}
		}

		if side then {
			wDist = (mapX - posX + (1 - stepX) / 2) / rayDirX;
		} else {
			wDist = (mapY - posY + (1 - stepY) / 2) / rayDirY;
		}

		lineHeight := HEIGHT / wDist;

		drawStart := math.floor(math.max(0, (-lineHeight / 2) + HEIGHT / 2));
		color := COLORS[WORLD[mapX][mapY]];

		if side then {
			color["red"] /= 2;
			color["green"] /= 2;
			color["blue"] /= 2;
		}

		cache[x].setColor(color);
		cache[x].setHeight(lineHeight);
		r.put(cache[x], x, drawStart);
	}
	r.put(fpsText, 0, 0);
	r.flush();
}

evaluateMovement(ref lapse : Number) => {
	rotSpeed := 0;
	if keys["a"] == true then {
		rotSpeed += -0.0025 * lapse;
	}
	if keys["d"] == true then {
		rotSpeed += 0.0025 * lapse;
	}

	moveSpeed := 0.005 * lapse;

	if keys["w"] == true then {
		potX := posX + dirX * moveSpeed;
		potY := posY + dirY * moveSpeed;
		if WORLD[math.floor(potX)][math.floor(posY)] == 0 then {
			posX = potX;
		}
		if WORLD[math.floor(posX)][math.floor(potY)] == 0 then {
			posY = potY;
		}
	}
	if keys["s"] == true then {
		potX := posX - dirX * moveSpeed;
		potY := posY - dirY * moveSpeed;
		if WORLD[math.floor(potX)][math.floor(posY)] == 0 then {
			posX = potX;
		}
		if WORLD[math.floor(posX)][math.floor(potY)] == 0 then {
			posY = potY;
		}
    }

    if rotSpeed != 0 then {
		oldDirX := dirX;
		dirX = dirX * math.cos(-rotSpeed) - dirY * math.sin(-rotSpeed);
		dirY = oldDirX * math.sin(-rotSpeed) + dirY * math.cos(-rotSpeed);
		oldPlaneX := planeX;
		planeX = planeX * math.cos(-rotSpeed) - planeY * math.sin(-rotSpeed);
		planeY = oldPlaneX * math.sin(-rotSpeed) + planeY * math.cos(-rotSpeed);
	}
}

evaluateInput() => {
	e := SDL.poll();
	if e["type"] == SDL.Event.QUIT then {
		SDL.QUIT();
		exit();
	} elif e["type"] == SDL.Event.KEYDOWN then {
		keys[e["keysym"]["sym"].chars()] = true;
	} elif e["type"] == SDL.Event.KEYUP then {
		keys[e["keysym"]["sym"].chars()] = false;
	}
}

start := clock.milliseconds();
fpsCounter := 0;
fpsTimer := clock.milliseconds();
while true do {
	evaluateInput();
	if (lapse := clock.milliseconds()) - start > 1000/60 then {
		tick := lapse - start;
		start = lapse;
		evaluateMovement(tick);
		refresh();
		fpsCounter += 1;

		if lapse - fpsTimer > 1000 then {
			fpsTimer = lapse;
			fpsText.setText("FPS: {0}" & [fpsCounter]);
			fpsCounter = 0;
		}
	}
}