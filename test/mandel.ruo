static mandel class {
	var ASCII = [
		" ",
		" ",
		".",
		".",
		"-",
		"-",
		"~",
		"~",
		"=",
		"=",
		"+",
		"+",
		"*",
		"*",
		"#",
		"#",
		"@",
		"@",
		" "
	];

	mandelConverger(ref real, ref imag) => {
		var zReal = real;
		var zImag = imag;
		var r2;
		var i2;
		for i in [0 until ASCII.size()] do {
			r2 = zReal * zReal;
			i2 = zImag * zImag;

			if r2 + i2 > 4 then {
				return i;
			}

			zImag = 2.0 * zReal * zImag + imag;
			zReal = r2 - i2 + real;
		}
		return ASCII.size() - 1;
	}

	draw(ref start_x, ref start_y, ref end_x, ref end_y, ref width, ref height) => {
		var dx = (end_x - start_x) / (width - 1);
		var dy = (end_y - start_y) / (height - 1);
		var s = "";
		for i in [0 until height] do {
			for j in [0 until width] do {
				s += ASCII[mandelConverger(start_x + j * dx, end_y - i * dy)];
			}
			s += "\n";
		}
		cons.setCursor(0, 0);
		puts(s);
		putln("`Z` to Exit");
	}
}

var x = -0.5;
var y = 0;
var scale = 1;
var width = 120;
var height = 40;

system("cls");

while true do {
	mandel.draw(x - scale, y - scale, x + scale, y + scale, width, height);
	switch input.char() in {
		charn("w")[0] do {
			y += 2 / height * scale;
		}
		charn("s")[0] do {
			y -= 2 / height * scale;
		}
		charn("a")[0] do {
			x -= 6 / width * scale;
		}
		charn("d")[0] do {
			x += 6 / width * scale;
		}
		charn("q")[0] do {
			scale *= 2;
		}
		charn("e")[0] do {
			scale /= 2;
		}
		charn("z")[0] do {
			break;
		}
	}
}

system("cls");