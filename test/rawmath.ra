EPSILON := (fn() {
	eps := 1;
	while (1 + eps / 2) != 1 do {
		eps /= 2;
	}
	return eps;
})();

fn FACT(ref x: Number) {
	if x > 1 then {
		return x * FACT(x - 1);
	}
	return x;
}

fn POW(ref x: Number, ref p: Number) {
	e := 1;
	for i in 0 .. p do {
		e *= x;
	}
	return e;
}

fn COS(ref x: Number) {
	c := 1;
	i := 1;
	while true do {
		c += (val := POW(-1, i) * POW(x, 2 * i) / FACT(2 * i));
		if math.abs(val) < EPSILON then {
			break;
		}
		i += 1;
	}
	return c;
}

fn TRPZD(ref a: Number, ref b: Number, ref n: Number) {
	h := (b - a) / n;
	sum := COS(a) + COS(b);
	for k in 1 .. n do {
		sum += 2 * COS(a + (k - 1) * h);
	}
	return h / 2 * sum;
}