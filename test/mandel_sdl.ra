load "sdl";

SDL.INIT();

x := -0.5;
y := 0;
scale := 1;
width := 64;
height := 64;

windowScale := 10;

window := new SDL.Window("Mandelbrot", width * windowScale, height * windowScale);
renderer := window.getRenderer();

cache := alloc(width).map((e) => alloc(height));
buffer := alloc(width).map((e) => alloc(height));

for x in 0 .. width do {
	for y in 0 .. height do {
		buffer[x][y] = new SDL.Rect(windowScale, windowScale, Color.BLACK);
		cache[x][y] = 0;
		renderer.put(buffer[x][y], x * windowScale, y * windowScale);
	}
}

static mandel class {
	precision := 64;

	mandelConverger(ref real : Number, ref imag : Number) => {
		zReal := real;
		zImag := imag;
		var r2, i2;
		for i in 0 .. precision do {
			r2 = zReal * zReal;
			i2 = zImag * zImag;

			if r2 + i2 > 4 then {
				return i;
			}

			zImag = 2.0 * zReal * zImag + imag;
			zReal = r2 - i2 + real;
		}
		return precision;
	}

	draw(ref start_x : Number, ref start_y : Number, ref end_x : Number, ref end_y : Number, ref width : Number, ref height : Number) => {
		dx := (end_x - start_x) / (width - 1);
		dy := (end_y - start_y) / (height - 1);
		for i in 0 .. width do {
			for j in 0 .. height do {
				v := mandelConverger(start_x + i * dx, end_y - j * dy);
				if cache[i][j] != v then {
					cache[i][j] = v;
					value := v / precision;
					buffer[i][j].setColor(math.floor((value ** 0.5) * 255), math.floor(value * 255), math.floor((value ** 2) * 255), 255);
				}
			}
		}

		renderer.update();
	}
}

while true do {
	mandel.draw(x - scale, y - scale, x + scale, y + scale, width, height);
	while (e := SDL.Event.poll())["type"] != SDL.Event.KEY_DOWN do {
		if (e["type"] == SDL.Event.QUIT) then {
			SDL.QUIT();
			exit();
		}
	}
	switch e["keysym"]["sym"] of {
		case 'w' do y += 2 / height * scale;
		case 's' do y -= 2 / height * scale;
		case 'a' do x -= 6 / width * scale;
		case 'd' do x += 6 / width * scale;
		case 'q' do scale = math.min(scale * 2, 4);
		case 'e' do	scale /= 2;
	}
}