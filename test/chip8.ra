# Adapted from SRC at http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/

load "fs";
load "sdl";

math.srand(clock.milliseconds());

clockSpeed := 750; # -1 for max

fontSet := [
    0xF0, 0x90, 0x90, 0x90, 0xF0, #0
    0x20, 0x60, 0x20, 0x20, 0x70, #1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, #2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, #3
    0x90, 0x90, 0xF0, 0x10, 0x10, #4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, #5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, #6
    0xF0, 0x10, 0x20, 0x40, 0x40, #7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, #8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, #9
    0xF0, 0x90, 0xF0, 0x90, 0x90, #A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, #B
    0xF0, 0x80, 0x80, 0x80, 0xF0, #C
    0xE0, 0x90, 0x90, 0x90, 0xE0, #D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, #E
    0xF0, 0x80, 0xF0, 0x80, 0x80  #F
];

struct Chip class {
	var	opcode,
		memory,
		V,
		I,
		pc,
		sp,
		gfx,
		stack,
		drawFlag,
		delayTimer,
		soundTimer,
		key,
		timer;

	init() => {
		memory = alloc(4096).map((e) => 0);
		V = alloc(16).map((e) => 0);
		gfx = alloc(2048).map((e) => false);
		stack = alloc(16).map((e) => 0);
		key = alloc(16).map((e) => 0);
		pc = 0x200;
		opcode = 0;
		I = 0;
		sp = 0;
		drawFlag = true;
		delayTimer = 0;
		soundTimer = 0;
		timer = clock.milliseconds();

		for i in 0 .. 80 do {
			memory[i] = fontSet[i];
		}
	}

	cycle() => {
		opcode = memory[pc] << 8 | memory[pc + 1];

		switch opcode & 0xF000 of {
			case 0x0000 do {
				switch opcode & 0x000F of {
					# 0x00E0 - CLS
					# Clear screen
					case 0x0000 do {
						for i in 0 .. 2048 do {
							gfx[i] = false;
						}
						drawFlag = true;
						pc += 2;
					}
					# 0x00EE - RET
					# Return from subroutine
					case 0x000E do {
						sp -= 1;
						pc = stack[sp];
						pc += 2;
					}
				} else {
					throw "Unknown opcode [0x0000]: {0}" & [opcode];
				}
			}
			# 1aaa - JP a
			# Jump to address
			case 0x1000 do pc = opcode & 0x0FFF;
			# 0x2aaa - CALL a
			# Enter subroutine at address
			case 0x2000 do {
				stack[sp] = pc;
				sp += 1;
				pc = opcode & 0x0FFF;
			}
			# 3xbb - SE Vx, b
			# Skip if register equals byte
			case 0x3000 do {
				if V[(opcode & 0x0F00) >> 8] == (opcode & 0x00FF) then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			# 4xbb - SNE Vx, b
			# Skip if register doesn't equal byte
			case 0x4000 do {
				if V[(opcode & 0x0F00) >> 8] != (opcode & 0x00FF) then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			# 5xy0 - SE Vx, Vy
			# Skip if register x != register y
			case 0x5000 do {
				if V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4] then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			# 6xbb - LD Vx, b
			# Set register to value
			case 0x6000 do {
				V[(opcode & 0x0F00) >> 8] = opcode & 0x00FF;
				pc += 2;
			}
			# 7xbb - ADD Vx, b
			# Adds value to register
			case 0x7000 do {
				V[(opcode & 0x0F00) >> 8] = (V[(opcode & 0x0F00) >> 8] + (opcode & 0x00FF)) % 256;
				pc += 2;
			}
			case 0x8000 do {
				switch opcode & 0x000F of {
					# 8xy0 - LD Vx, Vy
					# Set register x to register y
					case 0x0000 do {
						V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					# 8xy1 - OR Vx, Vy
					case 0x0001 do {
						V[(opcode & 0x0F00) >> 8] |= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					# 8xy2 - AND Vx, Vy
					case 0x0002 do {
						V[(opcode & 0x0F00) >> 8] &= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					# 8xy3 - XOR Vx, Vy
					case 0x0003 do {
						V[(opcode & 0x0F00) >> 8] ^= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					# 8xy4 - ADD Vx, Vy
					# Adds values at registers x and y, setting VF if > 255
					case 0x0004 do {
						val := V[(opcode & 0x0F00) >> 8] + V[(opcode & 0x00F0) >> 4];
						if val > 0xFF then {
							V[0xF] = 1;
						} else {
							V[0xF] = 0;
						}
						V[(opcode & 0x0F00) >> 8] = val % 256;
						pc += 2;
					}
					# 8xy5 - SUB Vx, Vy
					# Subtracts values at registers x and y, setting VF if Vx > Vy
					case 0x0005 do {
						val := V[(opcode & 0x0F00) >> 8] - V[(opcode & 0x00F0) >> 4];
						if val > 0 then {
							V[0xF] = 1;
						} else {
							V[0xF] = 0;
						}
						V[(opcode & 0x0F00) >> 8] = (val + 256) % 256;
						pc += 2;
					}
					# 8xy6 - SHR Vx
					case 0x0006 do {
						V[0xF] = V[(opcode & 0x0F00) >> 8] & 0x1;
						V[(opcode & 0x0F00) >> 8] = (V[(opcode & 0x0F00) >> 8] >> 1) % 256;
						pc += 2;
					}
					# 8xy7 - SUBN Vx, Vy
					# Subtracts values at registers y and x, setting VF if Vy > Vx
					case 0x0007 do {
						val := V[(opcode & 0x00F0) >> 4] - V[(opcode & 0x0F00) >> 8];
						if val > 0 then {
							V[0xF] = 1;
						} else {
							V[0xF] = 0;
						}
						V[(opcode & 0x0F00) >> 8] = (val + 256) % 256;
						pc += 2;
					}
					# 8xyE - SHL Vx, Vy
					case 0x000E do {
						V[0xF] = V[(opcode & 0x0F00) >> 8] >> 7;
						V[(opcode & 0x0F00) >> 8] = (V[(opcode & 0x0F00) >> 8] << 1) % 256;
						pc == 2;
					}
				} else {
					throw "Unknown opcode [0x8000]: {0}" & [opcode];
				}
			}
			case 0x9000 do {
				if V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4] then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			case 0xA000 do {
				I = opcode & 0x0FFF;
				pc += 2;
			}
			case 0xB000 do pc = (opcode & 0x0FFF) + V[0];
			case 0xC000 do {
				V[(opcode & 0x0F00) >> 8] = (math.rand() % 0xFF) & (opcode & 0x00FF);
				pc += 2;
			}
			case 0xD000 do {
				x := V[(opcode & 0x0F00) >> 8];
				y := V[(opcode & 0x00F0) >> 4];
				height := opcode & 0x000F;
				V[0xF] = 0;
				for yline in 0 .. height do {
					pixel := memory[I + yline];
					for xline in 0 .. 8 do {
						posX := (x + xline) % 64;
						posY := (y + yline) % 32;
						if (pixel & (0x80 >> xline)) != 0 then {
							if gfx[posX + posY * 64] then {
								V[0xF] = 1;
							}
							gfx[posX + posY * 64] ^= true;
						}
					}
				}
				drawFlag = true;
				pc += 2;
			}
			case 0xE000 do {
				switch opcode & 0x00FF of {
					case 0x009E do {
						if key[V[(opcode & 0x0F00) >> 8]] != 0 then {
							pc += 4;
						} else {
							pc += 2;
						}
					}
					case 0x00A1 do {
						if key[V[(opcode & 0x0F00) >> 8]] == 0 then {
							pc += 4;
						} else {
							pc += 2;
						}
					}
				} else {
					throw "Unknown opcode [0xE000]: {0}" & [opcode];
				}
			}
			case 0xF000 do {
				switch opcode & 0x00FF of {
					case 0x0007 do {
						V[(opcode & 0x0F00) >> 8] = delayTimer;
						pc += 2;
					}
					case 0x000A do {
						keyPress := false;
						for i in 0 .. 16 do {
							if key[i] != 0 then {
								V[(opcode & 0x0F00) >> 8] = i;
								keyPress = true;
							}
						}
						if (!keyPress) then {
							return nil;
						}
						pc += 2;
					}
					case 0x0015 do {
						delayTimer = V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x0018 do {
						soundTimer = V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x0018 do {
						soundTimer = V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x001E do {
						if I + V[(opcode & 0x0F00) >> 8] > 0xFFF then {
							V[0xF] = 1;
						} else {
							V[0xF] = 0;
						}
						I += V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x0029 do {
						I = V[(opcode & 0x0F00) >> 8] * 0x5;
						pc += 2;
					}
					case 0x0033 do {
						memory[I] = math.floor(V[(opcode & 0x0F00) >> 8] / 100);
						memory[I + 1] = math.floor(V[(opcode & 0x0F00) >> 8] / 10) % 10;
						memory[I + 2] = (V[(opcode & 0x0F00) >> 8] % 100) % 10;
						pc += 2;
					}
					case 0x0055 do {
						for i in 0 <> ((opcode & 0x0F00) >> 8) do {
							memory[I + i] = V[i];
						}
						I += ((opcode & 0x0F00) >> 8) + 1;
						pc += 2;
					}
					case 0x0065 do {
						for i in 0 <> ((opcode & 0x0F00) >> 8) do {
							V[i] = memory[I + i];
						}
						I += ((opcode & 0x0F00) >> 8) + 1;
						pc += 2;
					}
				} else {
					throw "Unknown opcode [0xF000]: {0}" & [opcode];
				}
			}
		} else {
			throw "Unknown opcode: {0}" & [opcode];
		}

		if (lapse := clock.milliseconds()) - timer > 1000/60 then {
			timer = lapse;
			if delayTimer > 0 then {
				delayTimer -= 1;
			}

			if soundTimer > 0 then {
				if soundTimer == 1 then {
					putln("BEEP!");
				}
				soundTimer -= 1;
			}
		}
	}

	loadFile(ref filename : String) => {
		putln("Loading: {0}" & [filename]);
		pFile := new Reader(filename, true);
		lSize := pFile.size();

		putln("Filesize: {0}" & [lSize]);

		buffer := codes(pFile.read(lSize));
		for i in 0 .. lSize do {
			memory[i + 512] = buffer[i];
		}

		putln("File Loaded");

		pFile.close();
	}
}

evaluateInput() => {
	e := SDL.Event.poll();
	if e["type"] == SDL.Event.QUIT then {
		SDL.QUIT();
		exit();
	} elif e["type"] == SDL.Event.KEY_DOWN then {
		switch e["keysym"]["sym"] of {
			case '1' do chip.key[0x1] = 1;
			case '2' do chip.key[0x2] = 1;
			case '3' do chip.key[0x3] = 1;
			case '4' do chip.key[0xC] = 1;
			case 'q' do chip.key[0x4] = 1;
			case 'w' do chip.key[0x5] = 1;
			case 'e' do chip.key[0x6] = 1;
			case 'r' do chip.key[0xD] = 1;
			case 'a' do chip.key[0x7] = 1;
			case 's' do chip.key[0x8] = 1;
			case 'd' do chip.key[0x9] = 1;
			case 'f' do chip.key[0xE] = 1;
			case 'z' do chip.key[0xA] = 1;
			case 'x' do chip.key[0x0] = 1;
			case 'c' do chip.key[0xB] = 1;
			case 'v' do chip.key[0xF] = 1;

			case ' ' do paused = !paused;
			case 'b' do buffered = !buffered;
		}
	} elif e["type"] == SDL.Event.KEY_UP then {
		switch e["keysym"]["sym"] of {
			case '1' do chip.key[0x1] = 0;
			case '2' do chip.key[0x2] = 0;
			case '3' do chip.key[0x3] = 0;
			case '4' do chip.key[0xC] = 0;
			case 'q' do chip.key[0x4] = 0;
			case 'w' do chip.key[0x5] = 0;
			case 'e' do chip.key[0x6] = 0;
			case 'r' do chip.key[0xD] = 0;
			case 'a' do chip.key[0x7] = 0;
			case 's' do chip.key[0x8] = 0;
			case 'd' do chip.key[0x9] = 0;
			case 'f' do chip.key[0xE] = 0;
			case 'z' do chip.key[0xA] = 0;
			case 'x' do chip.key[0x0] = 0;
			case 'c' do chip.key[0xB] = 0;
			case 'v' do chip.key[0xF] = 0;
		}
	}
}

paused := false;
buffered := false;

scale := 10;

chip := new Chip();

if _args.len() == 1 then {
	chip.loadFile(_args[0]);
} else {
	putln("Usage requires rom path");
	exit(1);
}

SDL.INIT();

w := new SDL.Window("Chip-8 Emulator", 64 * scale, 32 * scale);
r := w.getRenderer();

font := new SDL.Font("test/res/unifont.ttf", 16);
fpsText := new SDL.Text(font, "", Color.RED);

buffer := alloc(64).map((e) => alloc(32));
pixelBuffer := alloc(64).map((e) => alloc(32).map((e2) => false));

for x in 0 .. 64 do {
	for y in 0 .. 32 do {
		buffer[x][y] = new SDL.Rect(scale, scale, Color.BLACK);
		r.put(buffer[x][y], x * scale, y * scale);
	}
}

updateDisplayBuffered() => {
	for x in 0 .. 64 do {
		for y in 0 .. 32 do {
			if pixelBuffer[x][y] != chip.gfx[y * 64 + x] then {
				pixelBuffer[x][y] = chip.gfx[y * 64 + x];
				buffer[x][y].setColor(Color.WHITE);
			} else {
				buffer[x][y].setColor(pixelBuffer[x][y] ? Color.WHITE : Color.BLACK);
			}
		}
	}
}

updateDisplay() => {
	for x in 0 .. 64 do {
		for y in 0 .. 32 do {
			if pixelBuffer[x][y] != chip.gfx[y * 64 + x] then {
				pixelBuffer[x][y] = chip.gfx[y * 64 + x];
				buffer[x][y].setColor(pixelBuffer[x][y] ? Color.WHITE : Color.BLACK);
			}
		}
	}
}

r.put(fpsText, 0, 0);

fpsStart := clock.milliseconds();
fpsCounter := 0;
fpsTimer := clock.milliseconds();
cpuStart := clock.milliseconds();
while true do {
	evaluateInput();
	if !paused then {
		if (lapse := clock.milliseconds()) - cpuStart > 1000/clockSpeed then {
			cpuStart = lapse;
			chip.cycle();
		}

		# 60 fps Graphics Update
		if (lapse := clock.milliseconds()) - fpsStart > 1000/60 then {
			fpsStart = lapse;

			if lapse - fpsTimer > 1000 then {
				fpsTimer = lapse;
				fpsText.setText("FPS: {0}" & [fpsCounter]);
				fpsCounter = 0;
				r.update();
			}

			if chip.drawFlag then {
				if buffered then {
					updateDisplayBuffered();
				} else {
					updateDisplay();
				}
				r.update();
				chip.drawFlag = false;
			}

			fpsCounter += 1;
		}
	}
}