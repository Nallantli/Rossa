# Adapted from SRC at http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/

load "fs";
load "sdl";

fontSet := [
    0xF0, 0x90, 0x90, 0x90, 0xF0, #0
    0x20, 0x60, 0x20, 0x20, 0x70, #1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, #2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, #3
    0x90, 0x90, 0xF0, 0x10, 0x10, #4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, #5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, #6
    0xF0, 0x10, 0x20, 0x40, 0x40, #7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, #8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, #9
    0xF0, 0x90, 0xF0, 0x90, 0x90, #A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, #B
    0xF0, 0x80, 0x80, 0x80, 0xF0, #C
    0xE0, 0x90, 0x90, 0x90, 0xE0, #D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, #E
    0xF0, 0x80, 0xF0, 0x80, 0x80  #F
];

struct Chip class {
	var opcode, memory, V, I, pc, sp, gfx, stack, drawFlag, delayTimer, soundTimer, key;

	init() => {
		memory = alloc(4096).map((e) => 0);
		V = alloc(16).map((e) => 0);
		gfx = alloc(2048).map((e) => 0);
		stack = alloc(16).map((e) => 0);
		key = alloc(16).map((e) => 0);
		pc = 0x200;
		opcode = 0;
		I = 0;
		sp = 0;
		drawFlag = true;
		delayTimer = 0;
		soundTimer = 0;

		for i in 0 .. 80 do {
			memory[i] = fontSet[i];
		}
	}

	cycle() => {
		opcode = memory[pc] << 8 | memory[pc + 1];

		switch opcode & 0xF000 of {
			case 0x0000 do {
				switch opcode & 0x000F of {
					case 0x0000 do {
						for i in 0 .. 2048 do {
							gfx[i] = 0x0;
						}
						drawFlag = true;
						pc += 2;
					}
					case 0x000E do {
						sp -= 1;
						pc = stack[sp];
						pc += 2;
					}
				} else {
					throw "Unknown opcode [0x0000]: {0}" & [opcode];
				}
			}
			case 0x1000 do pc = opcode & 0x0FFF;
			case 0x2000 do {
				stack[sp] = pc;
				sp += 1;
				pc = opcode & 0x0FFF;
			}
			case 0x3000 do {
				if V[(opcode & 0x0F00) >> 8] == (opcode & 0x00FF) then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			case 0x4000 do {
				if V[(opcode & 0x0F00) >> 8] != (opcode & 0x00FF) then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			case 0x5000 do {
				if V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4] then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			case 0x6000 do {
				V[(opcode & 0x0F00) >> 8] = opcode & 0x00FF;
				pc += 2;
			}
			case 0x7000 do {
				V[(opcode & 0x0F00) >> 8] += opcode & 0x00FF;
				pc += 2;
			}
			case 0x8000 do {
				switch opcode & 0x000F of {
					case 0x0000 do {
						V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					case 0x0001 do {
						V[(opcode & 0x0F00) >> 8] |= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					case 0x0002 do {
						V[(opcode & 0x0F00) >> 8] &= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					case 0x0003 do {
						V[(opcode & 0x0F00) >> 8] ^= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					case 0x0004 do {
						if V[(opcode & 0x00F0) >> 4] > (0xFF - V[(opcode & 0x0F00) >> 8]) then {
							V[0xF] = 1;
						} else {
							V[0xF] = 0;
						}
						V[(opcode & 0x0F00) >> 8] += V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					case 0x0005 do {
						if V[(opcode & 0x00F0) >> 4] > V[(opcode & 0x0F00) >> 8] then {
							V[0xF] = 0;
						} else {
							V[0xF] = 1;
						}
						V[(opcode & 0x0F00) >> 8] -= V[(opcode & 0x00F0) >> 4];
						pc += 2;
					}
					case 0x0006 do {
						V[0xF] = V[(opcode & 0x0F00) >> 8] & 0x1;
						V[(opcode & 0x0F00) >> 8] >>= 1;
						pc += 2;
					}
					case 0x0007 do {
						if V[(opcode & 0x0F00) >> 8] > V[(opcode & 0x00F0) >> 4] then {
							V[0xF] = 0;
						} else {
							V[0xF] = 1;
						}
						V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4] - V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x000E do {
						V[0xF] = V[(opcode & 0x0F00) >> 8] >> 7;
						V[(opcode & 0x0F00) >> 8] <<= 1;
						pc == 2;
					}
				} else {
					throw "Unknown opcode [0x8000]: {0}" & [opcode];
				}
			}
			case 0x9000 do {
				if V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4] then {
					pc += 4;
				} else {
					pc += 2;
				}
			}
			case 0xA000 do {
				I = opcode & 0x0FFF;
				pc += 2;
			}
			case 0xB000 do pc = (opcode & 0x0FFF) + V[0];
			case 0xC000 do {
				V[(opcode & 0x0F00) >> 8] = (math.rand() % 0xFF) & (opcode & 0x00FF);
				pc += 2;
			}
			case 0xD000 do {
				x := V[(opcode & 0x0F00) >> 8];
				y := V[(opcode & 0x00F0) >> 4];
				height := opcode & 0x000F;
				V[0xF] = 0;
				for yline in 0 .. height do {
					pixel := memory[I + yline];
					for xline in 0 .. 8 do {
						posX := (x + xline);
						posY := (y + yline);
						if !(posX < 0 || posX >= 64 || posY < 0 || posY >= 32) then {
							if (pixel & (0x80 >> xline)) != 0 then {
								if gfx[posX + posY * 64] == 1 then {
									V[0xF] = 1;
								}
								gfx[posX + posY * 64] ^= 1;
							}
						}
					}
				}
				drawFlag = true;
				pc += 2;
			}
			case 0xE000 do {
				switch opcode & 0x00FF of {
					case 0x009E do {
						if key[V[(opcode & 0x0F00) >> 8]] != 0 then {
							pc += 4;
						} else {
							pc += 2;
						}
					}
					case 0x00A1 do {
						if key[V[(opcode & 0x0F00) >> 8]] == 0 then {
							pc += 4;
						} else {
							pc += 2;
						}
					}
				} else {
					throw "Unknown opcode [0xE000]: {0}" & [opcode];
				}
			}
			case 0xF000 do {
				switch opcode & 0x00FF of {
					case 0x0007 do {
						V[(opcode & 0x0F00) >> 8] = delayTimer;
						pc += 2;
					}
					case 0x000A do {
						keyPress := false;
						for i in 0 .. 16 do {
							if key[i] != 0 then {
								V[(opcode & 0x0F00) >> 8] = i;
								keyPress = true;
							}
						}
						if (!keyPress) then {
							return nil;
						}
						pc += 2;
					}
					case 0x0015 do {
						delayTimer = V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x0018 do {
						soundTimer = V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x0018 do {
						soundTimer = V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x001E do {
						if I + V[(opcode & 0x0F00) >> 8] > 0xFFF then {
							V[0xF] = 1;
						} else {
							V[0xF] = 0;
						}
						I += V[(opcode & 0x0F00) >> 8];
						pc += 2;
					}
					case 0x0029 do {
						I = V[(opcode & 0x0F00) >> 8] * 0x5;
						pc += 2;
					}
					case 0x0033 do {
						memory[I] = V[(opcode & 0x0F00) >> 8] / 100;
						memory[I + 1] = (V[(opcode & 0x0F00) >> 8] / 10) % 10;
						memory[I + 2] = (V[(opcode & 0x0F00) >> 8] % 100) % 10;
						pc += 2;
					}
					case 0x0055 do {
						for i in 0 .+ ((opcode & 0x0F00) >> 8) do {
							memory[I + i] = V[i];
						}
						I += ((opcode & 0x0F00) >> 8) + 1;
						pc += 2;
					}
					case 0x0065 do {
						for i in 0 .+ ((opcode & 0x0F00) >> 8) do {
							V[i] = memory[I + i];
						}
						I += ((opcode & 0x0F00) >> 8) + 1;
						pc += 2;
					}
				} else {
					throw "Unknown opcode [0xF000]: {0}" & [opcode];
				}
			}
		} else {
			throw "Unknown opcode: {0}" & [opcode];
		}

		if delayTimer > 0 then {
			delayTimer -= 1;
		}

		if soundTimer > 0 then {
			if soundTimer == 1 then {
				putln("BEEP!");
			}
			soundTimer -= 1;
		}
	}

	loadFile(ref filename : String) => {
		putln("Loading: {0}" & [filename]);
		pFile := new Reader(filename, true);
		lSize := pFile.size();

		putln("Filesize: {0}" & [lSize]);

		buffer := codes(pFile.read(lSize));
		for i in 0 .. lSize do {
			memory[i + 512] = buffer[i];
		}

		putln("File Loaded");

		pFile.close();
	}
}

evaluateInput() => {
	e := SDL.Event.poll();
	if e["type"] == SDL.Event.QUIT then {
		SDL.QUIT();
		exit();
	} elif e["type"] == SDL.Event.KEY_DOWN then {
		switch e["keysym"]["sym"] of {
			case '1' do chip.key[0x1] = 1;
			case '2' do chip.key[0x2] = 1;
			case '3' do chip.key[0x3] = 1;
			case '4' do chip.key[0xC] = 1;
			case 'q' do chip.key[0x4] = 1;
			case 'w' do chip.key[0x5] = 1;
			case 'e' do chip.key[0x6] = 1;
			case 'r' do chip.key[0xD] = 1;
			case 'a' do chip.key[0x7] = 1;
			case 's' do chip.key[0x8] = 1;
			case 'd' do chip.key[0x9] = 1;
			case 'f' do chip.key[0xE] = 1;
			case 'z' do chip.key[0xA] = 1;
			case 'x' do chip.key[0x0] = 1;
			case 'c' do chip.key[0xB] = 1;
			case 'v' do chip.key[0xF] = 1;
		}
	} elif e["type"] == SDL.Event.KEY_UP then {
		switch e["keysym"]["sym"] of {
			case '1' do chip.key[0x1] = 0;
			case '2' do chip.key[0x2] = 0;
			case '3' do chip.key[0x3] = 0;
			case '4' do chip.key[0xC] = 0;
			case 'q' do chip.key[0x4] = 0;
			case 'w' do chip.key[0x5] = 0;
			case 'e' do chip.key[0x6] = 0;
			case 'r' do chip.key[0xD] = 0;
			case 'a' do chip.key[0x7] = 0;
			case 's' do chip.key[0x8] = 0;
			case 'd' do chip.key[0x9] = 0;
			case 'f' do chip.key[0xE] = 0;
			case 'z' do chip.key[0xA] = 0;
			case 'x' do chip.key[0x0] = 0;
			case 'c' do chip.key[0xB] = 0;
			case 'v' do chip.key[0xF] = 0;
		}
	}
}

scale := 10;

chip := new Chip();

if _args.len() == 1 then {
	chip.loadFile(_args[0]);
} else {
	putln("Usage requires rom path");
	exit(1);
}

SDL.INIT();

w := new SDL.Window("Chip-8 Emulator", 64 * scale, 32 * scale);
r := w.getRenderer();

buffer := alloc(64).map((e) => alloc(32));

for x in 0 .. 64 do {
	for y in 0 .. 32 do {
		buffer[x][y] = new SDL.Rect(scale, scale, Color.BLACK);
		r.put(buffer[x][y], x * scale, y * scale);
	}
}

while true do {
	evaluateInput();
	chip.cycle();
	if chip.drawFlag then {
		for x in 0 .. 64 do {
			for y in 0 .. 32 do {
				buffer[x][y].setColor(chip.gfx[y * 64 + x] == 0 ? Color.BLACK : Color.WHITE);
			}
		}
		r.update();
		chip.drawFlag = false;
	}
}