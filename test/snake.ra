load "graphics";

static snake_game class {
	var	height,
		width,
		scale,
		direction,
		newDir,
		posX,
		posY,
		snake_size,
		rand,
		cache,
		buffer,
		w,
		r,
		paused,
		LOST,
		font,
		scoreText;

	speed := 80;

	refresh() => {
		if !LOST then {
			direction = newDir;

			switch direction of {
				case 0 do posX = (posX + 1 + width) % width;
				case 1 do posX = (posX - 1 + width) % width;
				case 2 do posY = (posY + 1 + height) % height;
				case 3 do posY = (posY - 1 + height) % height;
			}

			if cache[posX][posY] == -1 then {
				snake_size += 1;
				setApple();
			} elif cache[posX][posY] > 0 then {
				LOST = true;
				putln("You Lost!");
			}

			cache[posX][posY] = snake_size;
		}

		for x in 0 .. width do {
			for y in 0 .. height do {
				b := buffer[x][y];
				if cache[x][y] > 0 then {
					b.setColor(Color.HSL((cache[x][y] % 90) / 90, 1, 0.5));
				} elif cache[x][y] < 0 then {
					b.setColor(Color.WHITE);
				} else {
					b.setColor(Color.BLACK);
				}
			}
		}

		for x in cache do {
			for y in x do {
				if y > 0 then {
					y -= 1;
				}
			}
		}

		r.update();
	}

	setApple() => {
		scoreText.setText("Score: {0}" & [snake_size - 1]);
		var x, y;
		while true do {
			x = rand.nexti(0, width - 1);
			y = rand.nexti(0, height - 1);
			if cache[x][y] == 0 then {
				break;
			}
		}
		cache[x][y] = -1;
	}

	reset() => {
		paused = false;
		LOST = false;
		direction = 0;
		newDir = 0;
		posX = 5;
		posY = 5;
		snake_size = 1;
		for x in cache do {
			for y in x do {
				y = 0;
			}
		}
		setApple();
	}

	evaluateInput() => {
		e := SDL.Event.poll();
		if e["type"] == SDL.Event.QUIT then {
			SDL.QUIT();
			exit();
		} elif e["type"] == SDL.Event.KEY_DOWN then {
			switch e["keysym"]["sym"] of {
				case 'w', 'k' do {
					if direction != 2 then {
						newDir = 3;
					}
				}
				case 's', 'j' do {
					if direction != 3 then {
						newDir = 2;
					}
				}
				case 'a', 'h' do {
					if direction != 0 then {
						newDir = 1;
					}
				}
				case 'd', 'l' do {
					if direction != 1 then {
						newDir = 0;
					}
				}
				case '1' do speed = 160;
				case '2' do speed = 120;
				case '3' do speed = 80;
				case '4' do speed = 0;
				case ' ', 'p' do paused = !paused;
				case 'r' do reset();
			}
		}
	}

	`()`(ref width : Number, ref height : Number, ref scale : Number) => {
		SDL.INIT();

		this.width = width;
		this.height = height;
		this.scale = scale;

		rand = new Random();

		cache = alloc(width).map((e) => alloc(height));
		buffer = alloc(width).map((e) => alloc(height));

		w = new SDL.Window("Snake", width * scale, height * scale);
		r = w.getRenderer();

		font = new SDL.Font("test/res/unifont.ttf", 16);
		scoreText = new SDL.Text(font, "Score: 0", Color.WHITE);

		for x in 0 .. width do {
			for y in 0 .. height do {
				buffer[x][y] = new SDL.Rect(scale, scale, Color.BLACK);
				r.put(buffer[x][y], x * scale, y * scale);
			}
		}

		r.put(scoreText, 0, 0);

		reset();

		start := clock.milliseconds();
		while true do {
			evaluateInput();
			if (lapse := clock.milliseconds()) - start > speed && !paused then {
				start = lapse;
				refresh();
			}
		}
	}
}

snake_game(30, 20, 20);