# ARRAY

fn join(ref a: Array) {
	s := "";
	for e in a do {
		s ++= (e -> String);
	}
	return s;
}

fn push(ref a: Array, ref value) {
	refer a ++= [value];
}

fn unshift(ref a: Array, ref value) {
	refer a = [value] ++ a;
}

fn pop(ref a: Array, ref count: Number) {
	nv := alloc(len(a) - count);
	for i in 0 .. (len(a) - count) do {
		nv[i] = a[i];
	}
	refer a = nv;
}

fn shift(ref a: Array, ref count: Number) {
	nv := alloc(len(a) - count);
	for i in count .. len(a) do {
		nv[i - count] = a[i];
	}
	refer a = nv;
}

fn tail(ref a: Array, ref count: Number) {
	nv := a;
	return nv.shift(count);
}

fn tail(ref a: Array) {
	return a.tail(1);
}

fn head(ref a: Array, ref count: Number) {
	nv := a;
	return nv.pop(count);
}

fn head(ref a: Array) {
	return a.pop(1);
}

fn pop(ref a: Array) {
	refer pop(a, 1);
}

fn shift(ref a: Array) {
	refer shift(a, 1);
}

fn map(ref a: Array, ref f: Function<Any>) {
	nv := alloc(len(a));
	for i in 0 .. len(nv) do {
		nv[i] = f(a[i]);
	}
	return nv;
}

fn map(ref a: Array, ref f: Function<Any, Number>) {
	nv := alloc(len(a));
	for i in 0 .. len(nv) do {
		nv[i] = f(a[i], i);
	}
	return nv;
}

fn filter(ref a: Array, ref f: Function<Any>) {
	nv := [];
	for e in a do {
		if f(e) then {
			nv ++= [e];
		}
	}
	return nv;
}

fn filter(ref a: Array, ref f: Function<Any, Number>) {
	nv := [];
	for i in 0 .. a.len() do {
		if f(a[i], i) then {
			nv ++= [a[i]];
		}
	}
	return nv;
}

fn erase(ref a: Array, ref value) {
	nv := [];
	for e in a do {
		if e != value then {
			nv ++= [e];
		}
	}
	a = nv;
	refer a;
}

fn contains(ref a: Array, ref value) {
	for e in a do {
		if e == value then {
			return true;
		}
	}
	return false;
}

fn reverse(ref a: Array) {
	nv := alloc(len(a));
	for i in 0 .. len(a) do {
		nv[i] = a[len(a) - i - 1];
	}
	return nv;
}

fn back(ref a: Array) {
	refer a[len(a) - 1];
}

fn empty(ref a: Array) {
	return len(a) == 0;
}

fn sort(ref a: Array, ref comp: Function<Any, Any>) {
	if a.len() < 2 then {
		return a;
	}

	left := [];
	right := [];
	pivot := a[0];
	for i in 1 .. a.len() do {
		if comp(a[i], pivot) then {
			left.push(a[i]);
		} else {
			right.push(a[i]);
		}
	}

	return sort(left, comp) ++ [ pivot ] ++ sort(right, comp);
}

fn sort(ref a: Array) {
	return a.sort(`<`);
}

fn first(ref a: Array) {
	refer a[0];
}

fn second(ref a: Array) {
	refer a[1];
}

fn foldr(a : Array, o, f : Function) {
	if len(a) == 0 then {
		return o;
	}
	return f(a[0], foldr(a.shift(), o, f));
}

fn foldl(a : Array, o, f : Function) {
	if len(a) == 0 then {
		return o;
	}
	return f(foldl((+a).pop(), o, f), a[a.len() - 1]);
}