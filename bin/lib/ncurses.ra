extern "lib_ncurses";

var stdscr;

ATTR := extern_call lib_ncurses._fetch_constants();

struct Window {
	var ptr;

	fn init(ref height: Number, ref width: Number, ref x: Number, ref y: Number) {
		ptr = extern_call lib_ncurses._newwin(height, width, x, y);
	}

	fn init(ref ptr: Pointer) {
		this.ptr = ptr;
	}

	fn keypad(ref b: Boolean) extern_call lib_ncurses._keypad(ptr, b);

	fn box(ref a: Number, ref b: Number) extern_call lib_ncurses._box(ptr, a, b);

	fn border(
		ref ls: Number,
		ref rs: Number,
		ref ts: Number,
		ref bs: Number,
		ref tl: Number,
		ref tr: Number,
		ref bl: Number,
		ref br: Number
	) extern_call lib_ncurses._wborder(ptr, ls, rs, ts, bs, tl, tr, bl, br);

	fn refresh() extern_call lib_ncurses._wrefresh(ptr);

	fn move(ref y: Number, ref x: Number) extern_call lib_ncurses._wmove(ptr, y, x);

	fn printw(ref a) extern_call lib_ncurses._wprintw(ptr, a -> String);
	fn mvprintw(ref y: Number, ref x: Number, ref a) (move(y, x) == -1 ? -1 : printw(a -> String));

	fn addch(ref a: Number) extern_call lib_ncurses._waddch(ptr, a);
	fn mvaddch(ref y: Number, ref x: Number, ref a: Number) (move(y, x) == -1 ? -1 : addch(a));

	fn getch() extern_call lib_ncurses._wgetch(ptr);
	fn mvgetch(ref y: Number, ref x: Number, ref a: Number) (move(y, x) == -1 ? -1 : getch());

	fn attron(ref a: Number) extern_call lib_ncurses._wattron(ptr, a);
	fn attroff(ref a: Number) extern_call lib_ncurses._wattroff(ptr, a);
	fn attrset(ref a: Number) extern_call lib_ncurses._wattrset(ptr, a);

	fn delwin() {
		if ptr != nil then {
			r := extern_call lib_ncurses._delwin(ptr);
			ptr = nil;
			return r;
		}
	}

	fn rem() {
		delwin();
	}
}

fn initscr() {
	stdscr = new Window(extern_call lib_ncurses._initscr());
	refer stdscr;
}

fn endwin() {
	stdscr.ptr = nil;
	stdscr = nil;
	return extern_call lib_ncurses._endwin();
}

fn raw() extern_call lib_ncurses._raw();
fn noraw() extern_call lib_ncurses._noraw();

fn cbreak() extern_call lib_ncurses._cbreak();
fn nocbreak() extern_call lib_ncurses._nocbreak();

fn echo() extern_call lib_ncurses._echo();
fn noecho() extern_call lib_ncurses._noecho();

fn typeahead(ref n: Number) extern_call lib_ncurses._typeahead(n);

fn halfdelay(ref n: Number) extern_call lib_ncurses._halfdelay(n);