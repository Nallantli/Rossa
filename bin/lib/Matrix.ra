struct Matrix {
	var a;

	fn init(ref a: Array) {
		if $a[0] != Array then {
			this.init([a]);
		} else {
			last := a[0].len();
			for e in a do {
				if e.len() != last then {
					throw "Matrix is not properly defined by array: " ++ (a -> String);
				}
			}
			this.a = a;
		}
	}

	fn `=`(ref m: Matrix) {
		this.a = m.a;
	}

	fn `=`(ref a: Array) {
		this.init(a);
	}

	fn `+`(ref n: Number) {
		nm := a;
		for r in nm do {
			for c in r do {
				c += n;
			}
		}
		return new Matrix(nm);
	}

	fn rsub(ref n: Number) {
		nm := a;
		for r in nm do {
			for c in r do {
				c = n - c;
			}
		}
		return new Matrix(nm);
	}

	fn `-`(ref n: Number) `+`(-n);

	fn `*`(ref n: Number) {
		nm := a;
		for r in nm do {
			for c in r do {
				c *= n;
			}
		}
		return new Matrix(nm);
	}

	fn `+`(ref m: Matrix) {
		if m.a.len() != a.len() || m.a[0].len() != a[0].len() then {
			throw "Cannot conduct arithmatic on matrices of different sizes";
		}

		nm := a;

		for i in 0 .. nm.len() do {
			for j in 0 .. nm[0].len() do {
				nm[i][j] += m.a[i][j];
			}
		}

		return new Matrix(nm);
	}

	fn `+`(ref m: Array) `+`(new Matrix(m));

	fn `-`(ref m: Matrix) `+`(m * -1);

	fn `-`(ref m: Array) `-`(new Matrix(m));

	fn `*`(ref m: Matrix) {
		if a.len() != m.a[0].len() then {
			throw "Cannot multiply these Matrices";
		}

		nm := alloc(m.a.len()).map((e) alloc(a[0].len()));

		for i in 0 .. nm.len() do {
			for j in 0 .. nm[0].len() do {
				nm[i][j] = 0;
				for k in 0 .. m.a[0].len() do {
					nm[i][j] += a[k][j] * m.a[i][k];
				}
			}
		}

		return new Matrix(nm);
	}

	fn `*`(ref m: Array) `*`(new Matrix(m));

	fn det() {
		if a.len() != a[0].len() then {
			throw "Determinants are undefined for non-square Matrices";
		}

		if a.len() == 2 then {
			return a[0][0] * a[1][1] - a[1][0] * a[0][1];
		}

		sum := 0;
		for i in 0 .. a.len() do {
			nm := alloc(a.len() - 1).map(fn(e) alloc(a.len() - 1));
			y := 0;
			for j in 1 .. a.len() do {
				x := 0;
				for k in 0 .. a.len() do {
					if k != i then {
						nm[x][y] = a[k][j];
						x += 1;
					}
				}
				y += 1;
			}
			sum += (new Matrix(nm)).det() * ((-1) ** i) * a[i][0];
		}
		return sum;
	}

	fn `()`(ref i: Number) new Matrix([a[i]]);

	fn `()`(ref i, ref j) {
		if j == nil then {
			return new Matrix([a[i]]);
		}
		if i == nil then {
			col := [];
			for k in 0 .. a.len() do {
				col += [[a[k][j]]];
			}
			return new Matrix(col);
		}
		return new Matrix([[a[i][j]]]);
	}

	fn `->Array`() a;

	fn `->String`() (a -> String);
}

fn `+`(ref n: Number, ref m: Matrix) m + n;
fn `-`(ref n: Number, ref m: Matrix) m.rsub(n);
fn `*`(ref n: Number, ref m: Matrix) m * n;

fn `->Matrix`(ref a: Array) new Matrix(a);