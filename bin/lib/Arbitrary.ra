extern "lib_Arbitrary";

struct Arbitrary: Number {
	var ptr;

	fn init() {
		ptr = (extern_call lib_Arbitrary._arbitrary_init());
	}

	fn init(ref v: Number) {
		ptr = (extern_call lib_Arbitrary._arbitrary_init());
		extern_call lib_Arbitrary._arbitrary_set_number(ptr, v);
	}

	fn init(ref v: Arbitrary) {
		ptr = (extern_call lib_Arbitrary._arbitrary_init());
		extern_call lib_Arbitrary._arbitrary_set_arbitrary(ptr, v.ptr);
	}

	fn init(ref ptr: Pointer) {
		this.ptr = ptr;
	}

	fn `->Number`() {
		return (extern_call lib_Arbitrary._arbitrary_to_number(ptr));
	}

	fn `->String`() {
		return (extern_call lib_Arbitrary._arbitrary_to_string(ptr));
	}

	fn `..`(ref b) {
		list := [];
		temp := this + 0;
		while temp < b do {
			list ++= [ temp + 0 ];
			temp += 1;
		}
		return list;
	}

	fn `..`(ref b, ref step) {
		list := [];
		temp := this + 0;
		while temp < b do {
			list ++= [ temp + 0 ];
			temp += step;
		}
		return list;
	}

	fn `<>`(ref b) {
		list := [];
		temp := this + 0;
		while temp <= b do {
			list ++= [ temp + 0 ];
			temp += 1;
		}
		return list;
	}

	fn `<>`(ref b, ref step) {
		list := [];
		temp := this + 0;
		while temp <= b do {
			list ++= [ temp + 0 ];
			temp += step;
		}
		return list;
	}

	fn `-`() {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_mul_number(ptr, -1));
	}

	fn `+`(ref b: Number) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_add_number(ptr, b));
	}

	fn `+`(ref b: Arbitrary) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_add_arbitrary(ptr, b.ptr));
	}

	fn `-`(ref b: Number) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_sub_number(ptr, b));
	}

	fn `-`(ref b: Arbitrary) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_sub_arbitrary(ptr, b.ptr));
	}

	fn `*`(ref b: Number) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_mul_number(ptr, b));
	}

	fn `*`(ref b: Arbitrary) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_mul_arbitrary(ptr, b.ptr));
	}

	fn `/`(ref b: Number) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_div_number(ptr, b));
	}

	fn `/`(ref b: Arbitrary) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_div_arbitrary(ptr, b.ptr));
	}

	fn `%`(ref b: Number) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_mod_number(ptr, b));
	}

	fn `%`(ref b: Arbitrary) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_mod_arbitrary(ptr, b.ptr));
	}

	fn `**`(ref b: Number) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_pow_number(ptr, b));
	}

	fn `**`(ref b: Arbitrary) {
		return new Arbitrary(extern_call lib_Arbitrary._arbitrary_pow_arbitrary(ptr, b.ptr));
	}

	fn `<`(ref b: Number) {
		return (extern_call lib_Arbitrary._arbitrary_less_number(ptr, b));
	}

	fn `<`(ref b: Arbitrary) {
		return (extern_call lib_Arbitrary._arbitrary_less_arbitrary(ptr, b.ptr));
	}

	fn `>`(ref b: Number) {
		return (extern_call lib_Arbitrary._arbitrary_more_number(ptr, b));
	}

	fn `>`(ref b: Arbitrary) {
		return (extern_call lib_Arbitrary._arbitrary_more_arbitrary(ptr, b.ptr));
	}

	fn `<=`(ref b: Number) {
		return (extern_call lib_Arbitrary._arbitrary_eless_number(ptr, b));
	}

	fn `<=`(ref b: Arbitrary) {
		return (extern_call lib_Arbitrary._arbitrary_eless_arbitrary(ptr, b.ptr));
	}

	fn `>=`(ref b: Number) {
		return (extern_call lib_Arbitrary._arbitrary_emore_number(ptr, b));
	}

	fn `>=`(ref b: Arbitrary) {
		return (extern_call lib_Arbitrary._arbitrary_emore_arbitrary(ptr, b.ptr));
	}

	fn `==`(ref b: Number) {
		return (extern_call lib_Arbitrary._arbitrary_equals_number(ptr, b));
	}

	fn `==`(ref b: Arbitrary) {
		return (extern_call lib_Arbitrary._arbitrary_equals_arbitrary(ptr, b.ptr));
	}

	fn `!=`(ref b: Number) {
		return (extern_call lib_Arbitrary._arbitrary_nequals_number(ptr, b));
	}

	fn `!=`(ref b: Arbitrary) {
		return (extern_call lib_Arbitrary._arbitrary_nequals_arbitrary(ptr, b.ptr));
	}

	fn `=`(ref b: Number) {
		extern_call lib_Arbitrary._arbitrary_set_number(ptr, b);
	}

	fn `=`(ref b: Arbitrary) {
		extern_call lib_Arbitrary._arbitrary_set_arbitrary(ptr, b.ptr);
	}
}

fn `=`(ref a, ref b: Arbitrary) a = ($a == $Arbitrary ? b : (new Arbitrary() = b));

fn `+`(ref a: Number, ref b: Arbitrary) {
	return a + (b -> Number);
}

fn `-`(ref a: Number, ref b: Arbitrary) {
	return a - (b -> Number);
}

fn `*`(ref a: Number, ref b: Arbitrary) {
	return a * (b -> Number);
}

fn `/`(ref a: Number, ref b: Arbitrary) {
	return a / (b -> Number);
}

fn `%`(ref a: Number, ref b: Arbitrary) {
	return a % (b -> Number);
}

fn `**`(ref a: Number, ref b: Arbitrary) {
	return a ** (b -> Number);
}

fn `<`(ref a: Number, ref b: Arbitrary) {
	return a < (b -> Number);
}

fn `>`(ref a: Number, ref b: Arbitrary) {
	return a > (b -> Number);
}

fn `<=`(ref a: Number, ref b: Arbitrary) {
	return a <= (b -> Number);
}

fn `>=`(ref a: Number, ref b: Arbitrary) {
	return a >= (b -> Number);
}

fn `==`(ref a: Number, ref b: Arbitrary) {
	return a == (b -> Number);
}

fn `!=`(ref a: Number, ref b: Arbitrary) {
	return a != (b -> Number);
}

fn `..`(ref a: Number, ref b: Arbitrary) {
	return a .. (b -> Number);
}

fn `<>`(ref a: Number, ref b: Arbitrary) {
	return a <> (b -> Number);
}

fn `..`(ref a: Number, ref b: Arbitrary, ref step: Number) {
	return a .. (b -> Number) : step;
}

fn `<>`(ref a: Number, ref b: Arbitrary, ref step: Number) {
	return a <> (b -> Number) : step;
}
