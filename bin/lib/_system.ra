extern "lib_standard";

# CONSOLE

puts(ref s) => extern_call lib_standard._puts(s -> String);

puts(...) => {
	for s in _ do {
		extern_call lib_standard._puts(s -> String);
	}
}

putln(ref s) => extern_call lib_standard._puts((s -> String) ++ "\n");

putln(...) => {
	for s in _ do {
		extern_call lib_standard._puts(s -> String);
	}
	extern_call lib_standard._puts("\n");
}

putln() => puts("\n");

system(ref s : String) => extern_call lib_standard._system_call(s);

static cons {
	static decor {
		const FG_BLACK = "30";
		const FG_RED = "31";
		const FG_GREEN = "32";
		const FG_YELLOW = "33";
		const FG_BLUE = "34";
		const FG_MAGENTA = "35";
		const FG_CYAN = "36";
		const FG_WHITE = "37";
		const FG_BRIGHT_BLACK = "30;1";
		const FG_BRIGHT_RED = "31;1";
		const FG_BRIGHT_GREEN = "32;1";
		const FG_BRIGHT_YELLOW = "33;1";
		const FG_BRIGHT_BLUE = "34;1";
		const FG_BRIGHT_MAGENTA = "35;1";
		const FG_BRIGHT_CYAN = "36;1";
		const FG_BRIGHT_WHITE = "37;1";

		const BG_BLACK = "40";
		const BG_RED = "41";
		const BG_GREEN = "42";
		const BG_YELLOW = "43";
		const BG_BLUE = "44";
		const BG_MAGENTA = "45";
		const BG_CYAN = "46";
		const BG_WHITE = "47";
		const BG_BRIGHT_BLACK = "40;1";
		const BG_BRIGHT_RED = "41;1";
		const BG_BRIGHT_GREEN = "42;1";
		const BG_BRIGHT_YELLOW = "43;1";
		const BG_BRIGHT_BLUE = "44;1";
		const BG_BRIGHT_MAGENTA = "45;1";
		const BG_BRIGHT_CYAN = "46;1";
		const BG_BRIGHT_WHITE = "47;1";

		const BOLD = "1";
		const UNDERLINE = "4";
		const REVERSED = "7";

		const RESET = "0";
	}

	setDecor(ref s : String) => puts("\u001B[" ++ s ++ "m");

	setDecor(ref n : Number) => setDecor(n -> String);

	setDecor(ref v : Array) => {
		for c in v do {
			setDecor(c);
		}
	}

	setForeColor(ref r : Number, ref g : Number, ref b : Number) => {
		setDecor("38;5;" ++ ((16 + 36 * math.floor(5 * r / 255) + 6 * math.floor(5 * g / 255) + math.floor(5 * b / 255)) -> String));
	}

	setBackColor(ref r : Number, ref g : Number, ref b : Number) => {
		setDecor("48;5;" ++ ((16 + 36 * math.floor(5 * r / 255) + 6 * math.floor(5 * g / 255) + math.floor(5 * b / 255)) -> String));
	}

	moveCursor(ref x : Number, ref y : Number) => {
		s := "";
		if x < 0 then {
			s ++= "\u001B[" ++ (math.abs(x) -> String) ++ "D";
		} else {
			s ++= "\u001B[" ++ (x -> String) ++ "C";
		}
		if y < 0 then {
			s ++= "\u001B[" ++ (math.abs(y) -> String) ++ "A";
		} else {
			s ++= "\u001B[" ++ (x -> String) ++ "B";
		}
		puts(s);
	}

	setCursor(ref x : Number, ref y : Number) => puts("\u001B[" ++ (y -> String) ++ ";" ++ (x -> String) ++ "H");
}

static input {
	line() => extern_call lib_standard._input_line();

	token() => extern_call lib_standard._input_token();

	char() => extern_call lib_standard._input_char();
}

# SYSTEM

exit() => extern_call lib_standard._exit(0);

exit(ref n : Number) => extern_call lib_standard._exit(n);