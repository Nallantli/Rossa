# Abstraction from the more basic form of SDL, but markedly limited

extern "lib_graphics";

static Color {
	const RED = { "red" : 0xff, "green" : 0x00, "blue" : 0x00, "alpha" : 0xff };
	const BLUE = { "red" : 0x00, "green" : 0x00, "blue" : 0xff, "alpha" : 0xff };
	const GREEN = { "red" : 0x00, "green" : 0xff, "blue" : 0x00, "alpha" : 0xff };
	const YELLOW = { "red" : 0xff, "green" : 0xff, "blue" : 0x00, "alpha" : 0xff };
	const MAGENTA = { "red" : 0xff, "green" : 0x00, "blue" : 0xff, "alpha" : 0xff };
	const CYAN = { "red" : 0x00, "green" : 0xff, "blue" : 0xff, "alpha" : 0xff };
	const BLACK = { "red" : 0x00, "green" : 0x00, "blue" : 0x00, "alpha" : 0xff };
	const WHITE = { "red" : 0xff, "green" : 0xff, "blue" : 0xff, "alpha" : 0xff };

	fn `()`(ref r: Number, ref g: Number, ref b: Number) {
		return { "red" : r, "green" : g, "blue" : b, "alpha" : 0xff };
	}

	fn `()`(ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
		return { "red" : r, "green" : g, "blue" : b, "alpha" : a };
	}

	fn HSL(ref h: Number, ref s: Number, ref l: Number) HSL(h, s, l, 0xff);

	fn HSL(ref h: Number, ref s: Number, ref l: Number, ref a: Number) {
		fn hueToRgb(ref p: Number, ref q: Number, t: Number) {
			if t < 0 then {
				t += 1;
			} elif t > 1 then {
				t -= 1;
			}
			if t < 1/6 then {
				return p + (q - p) * 6 * t;
			}
			if t < 1/2 then {
				return q;
			}
			if t < 2/3 then {
				return p + (q - p) * (2/3 - t) * 6;
			}
			return p;
		}
		var r, g, b;
		if s == 0 then {
			r = l;
			g = l;
			b = l;
		} else {
			q := (l < 0.5 ? (l * (1 + s)) : (l + s - l * s));
			p := 2 * l - q;
			r = hueToRgb(p, q, h + 1/3);
			g = hueToRgb(p, q, h);
			b = hueToRgb(p, q, h - 1/3);
		}
		r *= 256;
		g *= 256;
		b *= 256;
		r = math.floor(r > 255 ? 255 : r);
		g = math.floor(g > 255 ? 255 : g);
		b = math.floor(b > 255 ? 255 : b);
		return { "red" : r, "green" : g, "blue" : b, "alpha" : a };
	}
}

static SDL {
	enum Event {
		NULL,
		FIRSTEVENT = 0,

		QUIT = 0x100,
		APP_TERMINATING,
		APP_LOWMEMORY,
		APP_WILLENTERBACKGROUND,
		APP_DIDENTERBACKGROUND,
		APP_WILLENTERFOREGROUND,
		APP_DIDENTERFOREGROUND,

		DISPLAYEVENT = 0x150,

		WINDOWEVENT = 0x200,
		SYSWMEVENT,

		KEYDOWN = 0x300,
		KEYUP,
		TEXTEDITING,
		TEXTINPUT,
		KEYMAPCHANGED,

		MOUSEMOTION = 0x400,
		MOUSEBUTTONDOWN,
		MOUSEBUTTONUP,
		MOUSEWHEEL,

		JOYAXISMOTION = 0x600,
		JOYBALLMOTION,
		JOYHATMOTION,
		JOYBUTTONDOWN,
		JOYBUTTONUP,
		JOYDEVICEADDED,
		JOYDEVICEREMOVED,

		CONTROLLERAXISMOTION = 0x650,
		CONTROLLERBUTTONDOWN,
		CONTROLLERBUTTONUP,
		CONTROLLERDEVICEADDED,
		CONTROLLERDEVICEREMOVED,
		CONTROLLERDEVICEREMAPPED,

		FINGERDOWN = 0x700,
		FINGERUP,
		FINGERMOTION,

		DOLLARGESTURE = 0x800,
		DOLLARRECORD,
		MULTIGESTURE,

		CLIPBOARDUPDATE = 0x900,

		DROPFILE = 0x1000,
		DROPTEXT,
		DROPBEGIN,
		DROPCOMPLETE,

		AUDIODEVICEADDED = 0x1100,
		AUDIODEVICEREMOVED,

		SENSORUPDATE = 0x1200,

		RENDERTARGETSRESET = 0x2000,
		RENDERDEVICERESET,

		USEREVENT = 0x8000,
		LASTEVENT = 0xFFFF
	}

	enum Win {
		SHOWN = 1,
		HIDDEN,
		EXPOSED,
		MOVED,
		RESIZED,
		SIZE_CHANGED,
		MINIMIZED,
		MAXIMIZED,
		RESTORED,
		ENTER,
		LEAVE,
		FOCUS_GAINED,
		FOCUS_LOST,
		CLOSE,
		TAKE_FOCUS,
		HIT_TEST
	}

	fn poll() {
		return (extern_call lib_graphics._event_poll());
	}

	fn INIT() {
		extern_call lib_graphics._sdl_init();
	}

	fn QUIT() {
		extern_call lib_graphics._sdl_quit();
	}

	struct Font {
		var ptr;

		fn init(ref path: String, ref sz: Number) {
			ptr = (extern_call lib_graphics._font_init(path, sz));
		}
	}

	struct Image {
		var ptr;

		fn init(ref path: String) {
			ptr = (extern_call lib_graphics._image_init_nokey(path));
		}

		fn init(ref path: String, ref r: Number, ref g: Number, ref b: Number) {
			ptr = (extern_call lib_graphics._image_init_key(path, r, g, b));
		}

		fn init(ref path: String, ref color: Dictionary) {
			ptr = (extern_call lib_graphics._image_init_key(path, color["red"], color["green"], color["blue"]));
		}
	}

	virtual Prototype {
		var ptr;

		fn setColor(ref color: Dictionary) {
			extern_call lib_graphics._shape_setColor(ptr, color["red"], color["green"], color["blue"], color["alpha"]);
		}

		fn setColor(ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
			extern_call lib_graphics._shape_setColor(ptr, r, g, b, a);
		}

		fn setColor(ref r: Number, ref g: Number, ref b: Number) {
			extern_call lib_graphics._shape_setColor(ptr, r, g, b, 0xff);
		}
	}

	virtual Sizable: Prototype {
		fn setSize(ref width: Number, ref height: Number) {
			extern_call lib_graphics._sizable_setSize(ptr, width, height);
		}

		fn setWidth(ref width: Number) {
			extern_call lib_graphics._sizable_setWidth(ptr, width);
		}

		fn setHeight(ref height: Number) {
			extern_call lib_graphics._sizable_setHeight(ptr, height);
		}
	}

	virtual Rotatable: Sizable {
		fn setAngle(ref angle: Number) {
			extern_call lib_graphics._rotatable_setAngle(ptr, angle);
		}

		fn pivot(ref x: Number, ref y: Number) {
			extern_call lib_graphics._rotatable_setCenter(ptr, x, y);
		}

		fn unpivot() {
			extern_call lib_graphics._rotatable_deCenter(ptr);
		}

		fn clip(ref x: Number, ref y: Number, ref width: Number, ref height: Number) {
			extern_call lib_graphics._rotatable_setClip(ptr, x, y, width, height);
		}

		fn unclip() {
			extern_call lib_graphics._rotatable_deClip(ptr);
		}
	}

	struct Rect: Sizable {
		fn init(ref width: Number, ref height: Number, ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
			ptr = (extern_call lib_graphics._rect_init(width, height, r, g, b, a));
		}

		fn init(ref width: Number, ref height: Number, ref color: Dictionary) {
			ptr = (extern_call lib_graphics._rect_init(width, height, color["red"], color["green"], color["blue"], color["alpha"]));
		}
	}

	struct Line: Prototype {
		fn init(ref x2: Number, ref y2: Number, ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
			ptr = (extern_call lib_graphics._line_init(x2, y2, r, g, b, a));
		}

		fn init(ref x2: Number, ref y2: Number, ref color: Dictionary) {
			ptr = (extern_call lib_graphics._line_init(x2, y2, color["red"], color["green"], color["blue"], color["alpha"]));
		}
	}

	struct Point: Prototype {
		fn init(ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
			ptr = (extern_call lib_graphics._point_init(r, g, b, a));
		}

		fn init(ref color: Dictionary) {
			ptr = (extern_call lib_graphics._point_init(color["red"], color["green"], color["blue"], color["alpha"]));
		}
	}

	struct Text: Prototype {
		fn init(ref font: SDL.Font, ref s: String, ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
			ptr = (extern_call lib_graphics._text_init(font.ptr, s, r, g, b, a));
		}

		fn init(ref font: SDL.Font, ref s: String, ref color: Dictionary) {
			ptr = (extern_call lib_graphics._text_init(font.ptr, s, color["red"], color["green"], color["blue"], color["alpha"]));
		}

		fn setText(ref s: String) {
			extern_call lib_graphics._text_setText(ptr, s);
		}
	}

	struct Texture: Rotatable {
		fn init(ref img: SDL.Image, ref width: Number, ref height: Number) {
			ptr = (extern_call lib_graphics._texture_init(img.ptr, width, height, 0xff, 0xff, 0xff));
		}

		fn init(ref img: SDL.Image, ref width: Number, ref height: Number, ref r: Number, ref g: Number, ref b: Number, ref a: Number) {
			ptr = (extern_call lib_graphics._texture_init(img.ptr, width, height, r, g, b, a));
		}

		fn init(ref img: SDL.Image, ref width: Number, ref height: Number, ref color: Dictionary) {
			ptr = (extern_call lib_graphics._texture_init(img.ptr, width, height, color["red"], color["green"], color["blue"], color["alpha"]));
		}

		fn setImage(ref img: SDL.Image) {
			extern_call lib_graphics._texture_setImage(ptr, img.ptr);
		}
	}

	struct Window {
		struct Renderer {
			var ptr;

			fn init(ref ptr: Pointer) {
				this.ptr = ptr;
			}

			fn put(ref shape: SDL.Prototype, ref x: Number, ref y: Number) {
				extern_call lib_graphics._renderer_draw(ptr, shape.ptr, x, y);
				refer shape;
			}

			fn clear() extern_call lib_graphics._renderer_clear(ptr);

			fn update() extern_call lib_graphics._renderer_update(ptr);

			fn flush() extern_call lib_graphics._renderer_flush(ptr);
		}

		var ptr, windowID, renderer;

		fn init(ref title: String, ref width: Number, ref height: Number) {
			data := (extern_call lib_graphics._window_init(title, width, height));
			ptr = data[0];
			windowID = data[1];
			extern_call lib_graphics._window_register(windowID, ptr);
		}

		fn getRenderer() {
			if renderer == nil then {
				renderer = new Renderer(extern_call lib_graphics._window_getRenderer(ptr));
			}
			return renderer;
		}

		fn close() {
			ptr = nil;
			renderer = nil;
		}
	}
}