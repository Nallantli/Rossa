extern "lib_net";

static net {
	encodeURI(ref s: String) extern_call lib_net._encodeURI(s);
	decodeURI(ref s: String) extern_call lib_net._decodeURI(s);

	struct Service {
		var ptr;

		fn init() {
			ptr = (extern_call lib_net._service_init());
		}
	}

	__DEFAULT_NET_SERVICE__ := new Service();

	struct Socket {
		var ptr, service;

		fn init(ref ip: String, ref port: Number) {
			ptr = (extern_call lib_net._socket_init(ip, port -> Number, __DEFAULT_NET_SERVICE__.ptr));
			this.service = __DEFAULT_NET_SERVICE__;
		}

		fn init(ref ip: String, ref port: Number, ref service: net.Service) {
			ptr = (extern_call lib_net._socket_init(ip, port -> Number, service.ptr));
			this.service = service;
		}

		fn init(ref ptr: Pointer, ref service: net.Service) {
			this.ptr = ptr;
			this.service = service;
		}

		fn send(ref data) {
			extern_call lib_net._socket_send(ptr, data -> String);
		}

		fn `<<`(ref data) {
			this.send(data);
			refer this;
		}

		fn read() {
			return (extern_call lib_net._socket_read(ptr));
		}

		fn readTo(ref delim: String) {
			return (extern_call lib_net._socket_read_until(ptr, delim));
		}

		fn close() {
			if ptr != nil then {
				extern_call lib_net._socket_close(ptr);
				ptr = nil;
			}
		}

		fn rem() {
			close();
		}
	}

	struct Server {
		var ptr, service;

		fn init(ref port: Number) {
			ptr = (extern_call lib_net._server_init(port -> Number, __DEFAULT_NET_SERVICE__.ptr));
			this.service = __DEFAULT_NET_SERVICE__;
		}

		fn init(ref port: Number, ref service: net.Service) {
			ptr = (extern_call lib_net._server_init(port -> Number, service.ptr));
			this.service = service;
		}

		fn accept() {
			return new Socket(extern_call lib_net._server_accept(ptr, service.ptr), service);
		}
	}

	struct Stream {
		var ptr;

		fn init(ref address: String, ref port: Number) {
			ptr = (extern_call lib_net._tcp_stream_init(address, port, __DEFAULT_NET_SERVICE__.ptr));
		}

		fn init(ref address: String, ref port: Number, ref service: net.Service) {
			ptr = (extern_call lib_net._tcp_stream_init(address, port, service.ptr));
		}

		fn request(ref target: String, ref data: Dictionary, ref version: Number) {
			return (extern_call lib_net._tcp_stream_request(target, version, data, ptr));
		}

		fn request(ref target: String, ref data: Dictionary) {
			return request(target, data, 11);
		}

		fn close() {
			if ptr != nil then {
				extern_call lib_net._tcp_stream_close(ptr);
				ptr = nil;
			}
		}

		fn rem() {
			close();
		}
	}
}