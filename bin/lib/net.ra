extern "libnet";

static net {
	encodeURI(ref s : String) => extern_call libnet._encodeURI(s);
	decodeURI(ref s : String) => extern_call libnet._decodeURI(s);

	struct Service {
		var ptr;

		init() => {
			ptr = (extern_call libnet._service_init());
		}
	}

	__DEFAULT_NET_SERVICE__ := new Service();

	struct Socket {
		var ptr, service;

		init(ref ip : String, ref port : Number) => {
			ptr = (extern_call libnet._socket_init(ip, port -> Number, __DEFAULT_NET_SERVICE__.ptr));
			this.service = __DEFAULT_NET_SERVICE__;
		}

		init(ref ip : String, ref port : Number, ref service : net.Service) => {
			ptr = (extern_call libnet._socket_init(ip, port -> Number, service.ptr));
			this.service = service;
		}

		init(ref ptr : Pointer, ref service : net.Service) => {
			this.ptr = ptr;
			this.service = service;
		}

		send(ref data) => {
			extern_call libnet._socket_send(ptr, data -> String);
		}

		`<<`(ref data) => {
			this.send(data);
			refer this;
		}

		read() => {
			return (extern_call libnet._socket_read(ptr));
		}

		readTo(ref delim : String) => {
			return (extern_call libnet._socket_read_until(ptr, delim));
		}

		close() => {
			if ptr != nil then {
				extern_call libnet._socket_close(ptr);
				ptr = nil;
			}
		}

		rem() => {
			close();
		}
	}

	struct Server {
		var ptr, service;

		init(ref port : Number) => {
			ptr = (extern_call libnet._server_init(port -> Number, __DEFAULT_NET_SERVICE__.ptr));
			this.service = __DEFAULT_NET_SERVICE__;
		}

		init(ref port : Number, ref service : net.Service) => {
			ptr = (extern_call libnet._server_init(port -> Number, service.ptr));
			this.service = service;
		}

		accept() => {
			return new Socket(extern_call libnet._server_accept(ptr, service.ptr), service);
		}
	}

	struct Stream {
		var ptr;

		init(ref address : String, ref port : Number) => {
			ptr = (extern_call libnet._tcp_stream_init(address, port, __DEFAULT_NET_SERVICE__.ptr));
		}

		init(ref address : String, ref port : Number, ref service : net.Service) => {
			ptr = (extern_call libnet._tcp_stream_init(address, port, service.ptr));
		}

		request(ref target : String, ref data : Dictionary, ref version : Number) => {
			return (extern_call libnet._tcp_stream_request(target, version, data, ptr));
		}

		request(ref target : String, ref data : Dictionary) => {
			return request(target, data, 11);
		}

		close() => {
			if ptr != nil then {
				extern_call libnet._tcp_stream_close(ptr);
				ptr = nil;
			}
		}

		rem() => {
			close();
		}
	}
}