load "fs.ruo";

static bitmap class {
	allocate(ref height : Number, ref width : Number) => {
		image := alloc(height);
		for i in image do {
			i = alloc(width);
			for j in i do {
				j = alloc(3);
			}
		}
		return image;
	}

	write(ref image : Vector, ref height : Number, ref width : Number, ref filename : String) => {
		f := new Writer(filename, true);
		widthInBytes := width * 3;
		paddingSize := (4 - (widthInBytes) % 4) % 4;
		stride := widthInBytes + paddingSize;

		padding := "";
		for i in [0 .. paddingSize] do {
			padding += "\0";
		}

		out := "";
		out += createHeader(height, stride);
		out += createInfo(height, width);
		for i in [0 .. height] do {
			for j in [0 .. width] do {
				out += chars(image[i][j][2]) + chars(image[i][j][1]) + chars(image[i][j][0]);
			}
			out += padding;
		}

		f.write(out);
	}

	createHeader(ref height : Number, ref stride : Number) => {
		fileSize := 54 + (stride * height);

		fileHeader := [
			charn("B")[0], charn("M")[0],
			fileSize, fileSize >> 8, fileSize >> 16, fileSize >> 24,
			0, 0, 0, 0,
			54, 0, 0, 0
		];

		return fileHeader.map((n) => chars(n)).join();
	}

	createInfo(ref height : Number, ref width : Number) => {
		infoHeader := [
			40, 0, 0, 0,
			width, width >> 8, width >> 16, width >> 24,
			height, height >> 8, height >> 16, height >> 24,
			1, 0,
			24, 0,
			0,0,0,0,
			0,0,0,0,
			0,0,0,0,
			0,0,0,0,
			0,0,0,0,
			0,0,0,0
		];

		return infoHeader.map((n) => chars(n)).join();
	}
}