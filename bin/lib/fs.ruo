extern _file_init in "libfs";
extern _file_close in "libfs";
extern _file_readLine in "libfs";
extern _file_read in "libfs";
extern _file_isOpen in "libfs";
extern _file_write in "libfs";
extern _path_init in "libfs";
extern _path_filename in "libfs";
extern _path_string in "libfs";
extern _path_append_path in "libfs";
extern _path_append_string in "libfs";
extern _path_exists in "libfs";
extern _path_mkdirs in "libfs";

struct Path class {
	var ptr;

	init() => {
		ptr = (extern_call libfs._path_init("."));
	}

	init(ref path) => {
		ptr = (extern_call libfs._path_init(path));
	}

	filename() => {
		return (extern_call libfs._path_filename(ptr));
	}

	up() => {
		return this / "..";
	}

	mkdirs() => {
		extern_call libfs._path_mkdirs(ptr);
	}

	exists() => {
		return (extern_call libfs._path_exists(ptr));
	}

	`=`(ref a) => {
		if a -> Type == @Path then {
			this.ptr = a.ptr;
		} else {
			init(a -> String);
		}
	}

	`==`(ref a) => {
		return this -> String == a -> String;
	}

	`!=`(ref a) => {
		return this -> String != a -> String;
	}

	`/`(ref a) => {
		if a -> Type == @Path then {
			return new Path(extern_call libfs._path_append_path(ptr, a.ptr));
		} else {
			return new Path(extern_call libfs._path_append_string(ptr, a -> String));
		}
	}

	`->String`() => {
		return (extern_call libfs._path_string(ptr));
	}
}

struct FileIO class {
	var ptr;

	init(ref filename) => {
		ptr = (extern_call libfs._file_init(filename -> String));
	}

	isOpen() => {
		return (extern_call libfs._file_isOpen(ptr));
	}

	read(ref n) => {
		return (extern_call libfs._file_read(ptr, n));
	}

	read() => {
		return read(1);
	}

	readLine() => {
		return (extern_call libfs._file_readLine(ptr));
	}

	write(ref s) => {
		extern_call libfs._file_write(ptr, s);
	}

	close() => {
		if ptr != nil then {
			extern_call libfs._file_close(ptr);
			ptr = nil;
		}
	}

	~() => {
		close();
	}
}