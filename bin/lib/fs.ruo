extern _writer_init in "libfs";
extern _writer_close in "libfs";
extern _writer_write in "libfs";
extern _writer_isOpen in "libfs";
extern _reader_init in "libfs";
extern _reader_close in "libfs";
extern _reader_readLine in "libfs";
extern _reader_read in "libfs";
extern _reader_isOpen in "libfs";
extern _path_init in "libfs";
extern _path_filename in "libfs";
extern _path_string in "libfs";
extern _path_append_path in "libfs";
extern _path_append_string in "libfs";
extern _path_exists in "libfs";
extern _path_mkdirs in "libfs";

struct Path class {
	var ptr;

	init() => {
		ptr = (extern_call libfs._path_init("."));
	}

	init(ref path : String) => {
		ptr = (extern_call libfs._path_init(path));
	}

	filename() => extern_call libfs._path_filename(ptr);

	up() => this / "..";

	mkdirs() => extern_call libfs._path_mkdirs(ptr);

	exists() => extern_call libfs._path_exists(ptr);

	`=`(ref a : @Path) => {
		this.ptr = a.ptr;
	}

	`=`(ref a) => {
		init(a -> String);
	}

	`==`(ref a) => this -> String == a -> String;

	`!=`(ref a) => this -> String != a -> String;

	`/`(ref a) => {
		if a -> Type == @Path then {
			return new Path(extern_call libfs._path_append_path(ptr, a.ptr));
		} else {
			return new Path(extern_call libfs._path_append_string(ptr, a -> String));
		}
	}

	`->String`() => extern_call libfs._path_string(ptr);
}

struct Writer class {
	var ptr;

	init(ref filename) => {
		ptr = (extern_call libfs._writer_init(filename -> String, false));
	}

	init(ref filename, ref binary : Boolean) => {
		ptr = (extern_call libfs._writer_init(filename -> String, binary));
	}

	isOpen() => extern_call libfs._writer_isOpen(ptr);

	write(ref s : String) => extern_call libfs._writer_write(ptr, s);

	close() => {
		if ptr != nil then {
			extern_call libfs._writer_close(ptr);
			ptr = nil;
		}
	}

	~() => {
		close();
	}
}

struct Reader class {
	var ptr;

	init(ref filename) => {
		ptr = (extern_call libfs._reader_init(filename -> String, false));
	}

	init(ref filename, ref binary : Boolean) => {
		ptr = (extern_call libfs._reader_init(filename -> String, binary));
	}

	isOpen() => extern_call libfs._reader_isOpen(ptr);

	read(ref n : Number) => extern_call libfs._reader_read(ptr, n);

	read() => read(1);

	readLine() => extern_call libfs._reader_readLine(ptr);

	close() => {
		if ptr != nil then {
			extern_call libfs._reader_close(ptr);
			ptr = nil;
		}
	}

	~() => {
		close();
	}
}