extern "lib_standard";

static math {
	const EPSILON = (|> {
		eps := 1;
		while (1 + eps / 2) != 1 do {
			eps /= 2;
		}
		return eps;
	})();

	const PI = 3.14159265359;

	fn rand() extern_call lib_standard._math_rand();

	fn srand(ref x: Number) extern_call lib_standard._math_srand(x);

	fn log(ref x: Number) extern_call lib_standard._log(x);

	fn abs(ref x: Number) (x < 0 ? -x : x);

	fn floor(ref x: Number) extern_call lib_standard._floor(x);

	fn ceil(ref x: Number) extern_call lib_standard._ceil(x);

	fn round(ref x: Number) extern_call lib_standard._round(x);

	fn round(ref x: Number, ref place: Number) (extern_call lib_standard._round(x * (10 ** place))) / (10 ** place);

	fn min(ref a: Number, ref b: Number) (a < b ? a : b);

	fn max(ref a: Number, ref b: Number) (a > b ? a : b);

	fn sin(ref x: Number) extern_call lib_standard._sin(x);

	fn cos(ref x: Number) extern_call lib_standard._cos(x);

	fn tan(ref x: Number) extern_call lib_standard._tan(x);

	fn csc(ref x: Number) 1 / sin(x);

	fn sec(ref x: Number) 1 / cos(x);

	fn cot(ref x: Number) 1 / tan(x);

	fn asin(ref x: Number) extern_call lib_standard._asin(x);

	fn acos(ref x: Number) extern_call lib_standard._acos(x);

	fn atan(ref x: Number) extern_call lib_standard._atan(x);

	fn sinh(ref x: Number) extern_call lib_standard._sinh(x);

	fn cosh(ref x: Number) extern_call lib_standard._cosh(x);

	fn tanh(ref x: Number) extern_call lib_standard._tanh(x);

	fn csch(ref x: Number) 1 / sinh(x);

	fn sech(ref x: Number) 1 / cosh(x);

	fn coth(ref x: Number) 1 / tanh(x);

	fn asinh(ref x: Number) extern_call lib_standard._asinh(x);

	fn acosh(ref x: Number) extern_call lib_standard._acosh(x);

	fn atanh(ref x: Number) extern_call lib_standard._atanh(x);
}