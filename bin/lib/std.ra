# BASIC

alloc := ((ref x) => alloc(x));

len := ((ref x) => len(x));

codes := ((ref x) => codes(x));

chars := ((ref x) => chars(x));

parse := ((ref x) => parse(x));

# OPERATOR LITERALS

`[]`(ref a, ref b) => _call_op 0 (a, b);
`..`(ref a, ref b) => _call_op 1 (a, b);
`..`(ref a, ref b, ref c) => _call_op 2 (a, b, c);
`.+`(ref a, ref b) => _call_op 3 (a, b);
`.+`(ref a, ref b, ref c) => _call_op 4 (a, b, c);

`+`(ref a, ref b) => _call_op 5 (a, b);
`-`(ref a, ref b) => _call_op 6 (a, b);
`*`(ref a, ref b) => _call_op 7 (a, b);
`/`(ref a, ref b) => _call_op 8 (a, b);
`%`(ref a, ref b) => _call_op 9 (a, b);
`**`(ref a, ref b) => _call_op 10 (a, b);

`<`(ref a, ref b) => _call_op 11 (a, b);
`>`(ref a, ref b) => _call_op 12 (a, b);
`<=`(ref a, ref b) => _call_op 13 (a, b);
`>=`(ref a, ref b) => _call_op 14 (a, b);

`|`(ref a, ref b) => _call_op 15 (a, b);
`^`(ref a, ref b) => _call_op 16 (a, b);
`&`(ref a, ref b) => _call_op 17 (a, b);
`<<`(ref a, ref b) => _call_op 18 (a, b);
`>>`(ref a, ref b) => _call_op 19 (a, b);

`()`(ref a, ref b : Array) => _call_op 20 (a, b);

# CASTING

`->Number`(ref a) => a -> Number;
`->Boolean`(ref a) => a -> Boolean;
`->String`(ref a) => a -> String;
`->Array`(ref a) => a -> Array;
`->Dictionary`(ref a) => a -> Dictionary;
`->Type`(ref a) => a -> Type;

# CONSOLE

puts(ref s) => extern_call STANDARD._puts(s -> String);

putln(ref s) => puts((s -> String) + "\n");

putln() => puts("\n");

system(ref s : String) => extern_call STANDARD._system_call(s);

static cons class {
	decor := {
		FG_BLACK : "30",
		FG_RED : "31",
		FG_GREEN : "32",
		FG_YELLOW : "33",
		FG_BLUE : "34",
		FG_MAGENTA : "35",
		FG_CYAN : "36",
		FG_WHITE : "37",
		FG_BRIGHT_BLACK : "30;1",
		FG_BRIGHT_RED : "31;1",
		FG_BRIGHT_GREEN : "32;1",
		FG_BRIGHT_YELLOW : "33;1",
		FG_BRIGHT_BLUE : "34;1",
		FG_BRIGHT_MAGENTA : "35;1",
		FG_BRIGHT_CYAN : "36;1",
		FG_BRIGHT_WHITE : "37;1",

		BG_BLACK : "40",
		BG_RED : "41",
		BG_GREEN : "42",
		BG_YELLOW : "43",
		BG_BLUE : "44",
		BG_MAGENTA : "45",
		BG_CYAN : "46",
		BG_WHITE : "47",
		BG_BRIGHT_BLACK : "40;1",
		BG_BRIGHT_RED : "41;1",
		BG_BRIGHT_GREEN : "42;1",
		BG_BRIGHT_YELLOW : "43;1",
		BG_BRIGHT_BLUE : "44;1",
		BG_BRIGHT_MAGENTA : "45;1",
		BG_BRIGHT_CYAN : "46;1",
		BG_BRIGHT_WHITE : "47;1",

		BOLD : "1",
		UNDERLINE : "4",
		REVERSED : "7",

		RESET : "0"
	};

	setDecor(ref s : String) => puts("\u001B[" + s + "m");

	setDecor(ref n : Number) => setDecor(n -> String);

	setDecor(ref v : Array) => {
		s := "";
		for c in v do {
			setDecor(c);
		}
	}

	setForeColor(ref r : Number, ref g : Number, ref b : Number) => {
		setDecor("38;5;" + ((16 + 36 * math.floor(5 * r / 255) + 6 * math.floor(5 * g / 255) + math.floor(5 * b / 255)) -> String));
	}

	setBackColor(ref r : Number, ref g : Number, ref b : Number) => {
		setDecor("48;5;" + ((16 + 36 * math.floor(5 * r / 255) + 6 * math.floor(5 * g / 255) + math.floor(5 * b / 255)) -> String));
	}

	moveCursor(ref x : Number, ref y : Number) => {
		s := "";
		if x < 0 then {
			s += "\u001B[" + (math.abs(x) -> String) + "D";
		} else {
			s += "\u001B[" + (x -> String) + "C";
		}
		if y < 0 then {
			s += "\u001B[" + (math.abs(y) -> String) + "A";
		} else {
			s += "\u001B[" + (x -> String) + "B";
		}
		puts(s);
	}

	setCursor(ref x : Number, ref y : Number) => puts("\u001B[" + (y -> String) + ";" + (x -> String) + "H");
}

static input class {
	line() => extern_call STANDARD._input_line();

	char() => extern_call STANDARD._input_char();
}

# RANDOM

struct Random class {
	var ptr;

	init() => {
		ptr = (extern_call STANDARD._rand_init(clock.milliseconds()));
	}

	init(ref seed : Number) => {
		ptr = (extern_call STANDARD._rand_init(seed));
	}

	nextf() => extern_call STANDARD._rand_nextFloat(ptr, 0, 1);

	nextf(ref max : Number) => extern_call STANDARD._rand_nextFloat(ptr, 0, max);

	nextf(ref min : Number, ref max : Number) => extern_call STANDARD._rand_nextFloat(ptr, min, max);

	nexti() => extern_call STANDARD._rand_nextInt(ptr, 0, 1);

	nexti(ref max : Number) => extern_call STANDARD._rand_nextInt(ptr, 0, max);

	nexti(ref min : Number, ref max : Number) => extern_call STANDARD._rand_nextInt(ptr, min, max);

	nextb() => (nexti() -> Boolean);
}

# SYSTEM

exit() => extern_call STANDARD._exit(0);

exit(ref n : Number) => extern_call STANDARD._exit(n);

# TIME

static clock class {
	milliseconds() => extern_call STANDARD._timeMS();

	sleep(ref ms : Number) => extern_call STANDARD._sleep(ms);

	format(ref s : String, ref time : Number) => extern_call STANDARD._clock_format(time, s);

	timeout(ref f : Function, ref ms : Number) => (new Thread(()[f, ms] => { sleep(ms); f(); })).detach();
}

# ARRAY

Array::join(ref a) => {
	s := "";
	for e in a do {
		s += (e -> String);
	}
	return s;
}

Array::push(ref a, ref value) => {
	refer a += [value];
}

Array::unshift(ref a, ref value) => {
	refer a = [value] + a;
}

Array::pop(ref a, ref count : Number) => {
	nv := alloc(len(a) - count);
	for i in 0 .. (len(a) - count) do {
		nv[i] = a[i];
	}
	refer a = nv;
}

Array::shift(ref a, ref count : Number) => {
	nv := alloc(len(a) - count);
	for i in count .. len(a) do {
		nv[i - count] = a[i];
	}
	refer a = nv;
}

Array::tail(ref a, ref count : Number) => {
	nv := a;
	return nv.shift(count);
}

Array::tail(ref a) => {
	return a.tail(1);
}

Array::head(ref a, ref count : Number) => {
	nv := a;
	return nv.pop(count);
}

Array::head(ref a) => {
	return a.pop(1);
}

Array::pop(ref a) => {
	refer pop(a, 1);
}

Array::shift(ref a) => {
	refer shift(a, 1);
}

Array::map(ref a, ref f : Function<Any>) => {
	nv := a;
	for e in nv do {
		e = f(e);
	}
	return nv;
}

Array::map(ref a, ref f : Function<Any, Number>) => {
	nv := a;
	for i in 0 .. nv.len() do {
		nv[i] = f(nv[i], i);
	}
	return nv;
}

Array::filter(ref a, ref f : Function<Any>) => {
	nv := [];
	for e in a do {
		if f(e) then {
			nv += [e];
		}
	}
	return nv;
}

Array::filter(ref a, ref f : Function<Any, Number>) => {
	nv := [];
	for i in 0 .. a.len() do {
		if f(a[i], i) then {
			nv += [a[i]];
		}
	}
	return nv;
}

Array::reverse(ref a) => {
	nv := alloc(len(a));
	for i in 0 .. len(a) do {
		nv[i] = a[len(a) - i - 1];
	}
	return nv;
}

Array::back(ref a) => {
	refer a[len(a) - 1];
}

Array::empty(ref a) => {
	return len(a) == 0;
}

Array::sort(ref a, ref comp : Function<Any, Any>) => {
	if a.len() < 2 then {
		return a;
	}

	left := [];
	right := [];
	pivot := a[0];
	for i in 1 .. a.len() do {
		if comp(a[i], pivot) then {
			left.push(a[i]);
		} else {
			right.push(a[i]);
		}
	}

	return sort(left) + [ pivot ] + sort(right);
}

Array::sort(ref a) => {
	return a.sort(`<`);
}

Array::first(ref a) => {
	refer a[0];
}

Array::second(ref a) => {
	refer a[1];
}

# STRING

String::push(ref s, ref value : Number) => {
	refer s += chars(value);
}

String::unshift(ref s, ref value : Number) => {
	refer s = chars(value) + s;
}

String::pop(ref s, ref count : Number) => {
	refer s = (s -> Array).pop(count).join();
}

String::shift(ref s, ref count : Number) => {
	refer s = (s -> Array).shift(count).join();
}

String::pop(ref s) => {
	refer s = pop(s, 1);
}

String::shift(ref s) => {
	refer s = shift(s, 1);
}

String::reverse(ref s) => {
	return (s -> Array).reverse().join();
}

String::empty(ref s) => {
	return len(s) == 0;
}

String::`[]`(ref s, ref i : Number) => {
	return (s -> Array)[i];
}

String::`..`(ref a, ref b : String) => {
	return [codes(a)[0] .. codes(b)[0]];
}

String::parseDict(ref a) => {
	return parse(a + ";")[0];
}

String::size(ref a) => extern_call STANDARD._string_size(a);

String::split(ref s, ref c : Number) => s.split(chars(c));

String::split(ref s, ref d : String) => {
	if d.len() != 1 then {
		throw "Cannot split a String where the delimiter's length is not 1";
	}

	a := (s -> Array) + [d];
	c := "";
	r := [];

	for e in a do {
		if e == d then {
			r += [c];
			c = "";
		} else {
			c += e;
		}
	}

	return r;
}

# MATH

static math class {
	EPSILON := (|> {
		eps := 1;
		while (1 + eps / 2) != 1 do {
			eps /= 2;
		}
		return eps;
	})();

	rand() => extern_call STANDARD._math_rand();

	srand(ref x : Number) => extern_call STANDARD._math_srand(x);

	log(ref x : Number) => extern_call STANDARD._log(x);

	abs(ref x : Number) => (x < 0 ? -x : x);

	floor(ref x : Number) => extern_call STANDARD._floor(x);

	ceil(ref x : Number) => extern_call STANDARD._ceil(x);

	round(ref x : Number) => extern_call STANDARD._round(x);

	round(ref x : Number, ref place : Number) => (extern_call STANDARD._round(x * (10 ** place))) / (10 ** place);

	min(ref a : Number, ref b : Number) => (a < b ? a : b);

	max(ref a : Number, ref b : Number) => (a > b ? a : b);

	sin(ref x : Number) => extern_call STANDARD._sin(x);

	cos(ref x : Number) => extern_call STANDARD._cos(x);

	tan(ref x : Number) => extern_call STANDARD._tan(x);

	csc(ref x : Number) => 1 / sin(x);

	sec(ref x : Number) => 1 / cos(x);

	cot(ref x : Number) => 1 / tan(x);

	asin(ref x : Number) => extern_call STANDARD._asin(x);

	acos(ref x : Number) => extern_call STANDARD._acos(x);

	atan(ref x : Number) => extern_call STANDARD._atan(x);

	sinh(ref x : Number) => extern_call STANDARD._sinh(x);

	cosh(ref x : Number) => extern_call STANDARD._cosh(x);

	tanh(ref x : Number) => extern_call STANDARD._tanh(x);

	csch(ref x : Number) => 1 / sinh(x);

	sech(ref x : Number) => 1 / cosh(x);

	coth(ref x : Number) => 1 / tanh(x);

	asinh(ref x : Number) => extern_call STANDARD._asinh(x);

	acosh(ref x : Number) => extern_call STANDARD._acosh(x);

	atanh(ref x : Number) => extern_call STANDARD._atanh(x);

	PI := 2 * asin(1);
}

static regex class {
	match(ref s : String, ref r : String) => extern_call STANDARD._regex_match(r, s);

	replace(ref s : String, ref r : String, ref x : String) => extern_call STANDARD._regex_replace(r, x, s);
}

struct Thread class {
	var ptr;

	init(ref f : Function) => {
		ptr = (extern_call STANDARD._thread_init(f));
	}

	join() => extern_call STANDARD._thread_join(ptr);

	detach() => extern_call STANDARD._thread_detach(ptr);

	~() => {
		detach();
	}
}

Function::split(f) => extern_call STANDARD._function_split(f);